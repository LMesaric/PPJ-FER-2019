IDN 1 include
OP_LT 1 <
IDN 1 algorithm
OP_GT 1 >
IDN 2 include
OP_LT 2 <
IDN 2 cassert
OP_GT 2 >
IDN 3 include
OP_LT 3 <
IDN 3 cstdio
OP_GT 3 >
IDN 4 include
OP_LT 4 <
IDN 4 iostream
OP_GT 4 >
IDN 5 include
OP_LT 5 <
IDN 5 sstream
OP_GT 5 >
IDN 6 include
OP_LT 6 <
IDN 6 string
OP_GT 6 >
IDN 7 include
OP_LT 7 <
IDN 7 vector
OP_GT 7 >
IDN 8 include
OP_LT 8 <
IDN 8 cstring
OP_GT 8 >
IDN 9 include
OP_LT 9 <
IDN 9 map
OP_GT 9 >
IDN 10 include
OP_LT 10 <
IDN 10 set
OP_GT 10 >
IDN 12 using
IDN 12 namespace
IDN 12 std
TOCKAZAREZ 12 ;
KR_STRUCT 14 struct
IDN 14 Journal
L_VIT_ZAGRADA 14 {
KR_INT 15 int
IDN 15 cCnt
ZAREZ 15 ,
IDN 15 pCnt
TOCKAZAREZ 15 ;
IDN 16 string
IDN 16 name
TOCKAZAREZ 16 ;
IDN 17 Journal
L_ZAGRADA 17 (
KR_INT 17 int
IDN 17 c
ZAREZ 17 ,
KR_INT 17 int
IDN 17 p
ZAREZ 17 ,
KR_CONST 17 const
IDN 17 string
AMPERSAND 17 &
IDN 17 s
D_ZAGRADA 17 )
IDN 17 cCnt
L_ZAGRADA 17 (
IDN 17 c
D_ZAGRADA 17 )
ZAREZ 17 ,
IDN 17 pCnt
L_ZAGRADA 17 (
IDN 17 p
D_ZAGRADA 17 )
ZAREZ 17 ,
IDN 17 name
L_ZAGRADA 17 (
IDN 17 s
D_ZAGRADA 17 )
L_VIT_ZAGRADA 17 {
D_VIT_ZAGRADA 17 }
D_VIT_ZAGRADA 18 }
TOCKAZAREZ 18 ;
IDN 19 bool
IDN 19 operator
OP_LT 19 <
L_ZAGRADA 19 (
KR_CONST 19 const
IDN 19 Journal
AMPERSAND 19 &
IDN 19 a
ZAREZ 19 ,
KR_CONST 19 const
IDN 19 Journal
AMPERSAND 19 &
IDN 19 b
D_ZAGRADA 19 )
L_VIT_ZAGRADA 19 {
KR_IF 20 if
L_ZAGRADA 20 (
IDN 20 a
TOCKA 20 .
IDN 20 cCnt
ASTERISK 20 *
IDN 20 b
TOCKA 20 .
IDN 20 pCnt
OP_NEQ 20 !=
IDN 20 b
TOCKA 20 .
IDN 20 cCnt
ASTERISK 20 *
IDN 20 a
TOCKA 20 .
IDN 20 pCnt
D_ZAGRADA 20 )
KR_RETURN 21 return
IDN 21 a
TOCKA 21 .
IDN 21 cCnt
ASTERISK 21 *
IDN 21 b
TOCKA 21 .
IDN 21 pCnt
OP_GT 21 >
IDN 21 b
TOCKA 21 .
IDN 21 cCnt
ASTERISK 21 *
IDN 21 a
TOCKA 21 .
IDN 21 pCnt
TOCKAZAREZ 21 ;
KR_ELSE 22 else
KR_IF 22 if
L_ZAGRADA 22 (
IDN 22 a
TOCKA 22 .
IDN 22 pCnt
OP_NEQ 22 !=
IDN 22 b
TOCKA 22 .
IDN 22 pCnt
D_ZAGRADA 22 )
KR_RETURN 23 return
IDN 23 a
TOCKA 23 .
IDN 23 pCnt
OP_GT 23 >
IDN 23 b
TOCKA 23 .
IDN 23 pCnt
TOCKAZAREZ 23 ;
KR_ELSE 24 else
KR_RETURN 25 return
IDN 25 a
TOCKA 25 .
IDN 25 name
OP_LT 25 <
IDN 25 b
TOCKA 25 .
IDN 25 name
TOCKAZAREZ 25 ;
D_VIT_ZAGRADA 26 }
IDN 27 class
IDN 27 AcademicJournal
L_VIT_ZAGRADA 27 {
IDN 28 public
IDN 29 vector
OP_LT 29 <
IDN 29 string
OP_GT 29 >
IDN 29 rankByImpact
L_ZAGRADA 29 (
IDN 29 vector
OP_LT 29 <
IDN 29 string
OP_GT 29 >
IDN 29 papers
D_ZAGRADA 29 )
L_VIT_ZAGRADA 29 {
IDN 30 map
OP_LT 30 <
IDN 30 string
ZAREZ 30 ,
KR_INT 30 int
OP_GT 30 >
IDN 30 pCnt
ZAREZ 30 ,
IDN 30 cCnt
TOCKAZAREZ 30 ;
IDN 31 vector
OP_LT 31 <
IDN 31 string
OP_GT 31 >
IDN 31 name
TOCKAZAREZ 31 ;
IDN 32 vector
OP_LT 32 <
IDN 32 set
OP_LT 32 <
KR_INT 32 int
OP_GT 32 >
OP_GT 32 >
IDN 32 cites
TOCKAZAREZ 32 ;
KR_FOR 34 for
L_ZAGRADA 34 (
KR_INT 34 int
IDN 34 i
OP_PRIDRUZI 34 =
BROJ 34 0
TOCKAZAREZ 34 ;
IDN 34 i
OP_LT 34 <
L_ZAGRADA 34 (
KR_INT 34 int
D_ZAGRADA 34 )
IDN 34 papers
TOCKA 34 .
IDN 34 size
L_ZAGRADA 34 (
D_ZAGRADA 34 )
TOCKAZAREZ 34 ;
OP_INC 34 ++
IDN 34 i
D_ZAGRADA 34 )
L_VIT_ZAGRADA 34 {
KR_INT 35 int
IDN 35 x
OP_PRIDRUZI 35 =
IDN 35 papers
L_UGL_ZAGRADA 35 [
IDN 35 i
D_UGL_ZAGRADA 35 ]
TOCKA 35 .
IDN 35 find
L_ZAGRADA 35 (
ZNAK 35 '.'
D_ZAGRADA 35 )
TOCKAZAREZ 35 ;
IDN 36 name
TOCKA 36 .
IDN 36 push_back
L_ZAGRADA 36 (
IDN 36 papers
L_UGL_ZAGRADA 36 [
IDN 36 i
D_UGL_ZAGRADA 36 ]
TOCKA 36 .
IDN 36 substr
L_ZAGRADA 36 (
BROJ 36 0
ZAREZ 36 ,
IDN 36 x
D_ZAGRADA 36 )
D_ZAGRADA 36 )
TOCKAZAREZ 36 ;
OP_INC 37 ++
IDN 37 pCnt
L_UGL_ZAGRADA 37 [
IDN 37 name
TOCKA 37 .
IDN 37 back
L_ZAGRADA 37 (
D_ZAGRADA 37 )
D_UGL_ZAGRADA 37 ]
TOCKAZAREZ 37 ;
IDN 39 cites
TOCKA 39 .
IDN 39 push_back
L_ZAGRADA 39 (
IDN 39 set
OP_LT 39 <
KR_INT 39 int
OP_GT 39 >
L_ZAGRADA 39 (
D_ZAGRADA 39 )
D_ZAGRADA 39 )
TOCKAZAREZ 39 ;
KR_IF 40 if
L_ZAGRADA 40 (
IDN 40 x
PLUS 40 +
BROJ 40 1
OP_LT 40 <
L_ZAGRADA 40 (
KR_INT 40 int
D_ZAGRADA 40 )
IDN 40 papers
L_UGL_ZAGRADA 40 [
IDN 40 i
D_UGL_ZAGRADA 40 ]
TOCKA 40 .
IDN 40 size
L_ZAGRADA 40 (
D_ZAGRADA 40 )
D_ZAGRADA 40 )
L_VIT_ZAGRADA 40 {
IDN 41 istringstream
IDN 41 is
L_ZAGRADA 41 (
IDN 41 papers
L_UGL_ZAGRADA 41 [
IDN 41 i
D_UGL_ZAGRADA 41 ]
TOCKA 41 .
IDN 41 substr
L_ZAGRADA 41 (
IDN 41 x
PLUS 41 +
BROJ 41 1
D_ZAGRADA 41 )
D_ZAGRADA 41 )
TOCKAZAREZ 41 ;
KR_INT 42 int
IDN 42 t
TOCKAZAREZ 42 ;
KR_WHILE 43 while
L_ZAGRADA 43 (
IDN 43 is
OP_GT 43 >
OP_GT 43 >
IDN 43 t
D_ZAGRADA 43 )
IDN 44 cites
TOCKA 44 .
IDN 44 back
L_ZAGRADA 44 (
D_ZAGRADA 44 )
TOCKA 44 .
IDN 44 insert
L_ZAGRADA 44 (
IDN 44 t
D_ZAGRADA 44 )
TOCKAZAREZ 44 ;
D_VIT_ZAGRADA 45 }
D_VIT_ZAGRADA 46 }
KR_FOR 48 for
L_ZAGRADA 48 (
KR_INT 48 int
IDN 48 i
OP_PRIDRUZI 48 =
BROJ 48 0
TOCKAZAREZ 48 ;
IDN 48 i
OP_LT 48 <
L_ZAGRADA 48 (
KR_INT 48 int
D_ZAGRADA 48 )
IDN 48 papers
TOCKA 48 .
IDN 48 size
L_ZAGRADA 48 (
D_ZAGRADA 48 )
TOCKAZAREZ 48 ;
OP_INC 48 ++
IDN 48 i
D_ZAGRADA 48 )
KR_FOR 49 for
L_ZAGRADA 49 (
IDN 49 set
OP_LT 49 <
KR_INT 49 int
OP_GT 49 >
IDN 49 const_iterator
IDN 49 it
OP_PRIDRUZI 49 =
IDN 49 cites
L_UGL_ZAGRADA 49 [
IDN 49 i
D_UGL_ZAGRADA 49 ]
TOCKA 49 .
IDN 49 begin
L_ZAGRADA 49 (
D_ZAGRADA 49 )
TOCKAZAREZ 49 ;
IDN 49 it
OP_NEQ 49 !=
IDN 49 cites
L_UGL_ZAGRADA 49 [
IDN 49 i
D_UGL_ZAGRADA 49 ]
TOCKA 49 .
IDN 49 end
L_ZAGRADA 49 (
D_ZAGRADA 49 )
TOCKAZAREZ 49 ;
OP_INC 49 ++
IDN 49 it
D_ZAGRADA 49 )
KR_IF 50 if
L_ZAGRADA 50 (
IDN 50 name
L_UGL_ZAGRADA 50 [
ASTERISK 50 *
IDN 50 it
D_UGL_ZAGRADA 50 ]
OP_NEQ 50 !=
IDN 50 name
L_UGL_ZAGRADA 50 [
IDN 50 i
D_UGL_ZAGRADA 50 ]
D_ZAGRADA 50 )
OP_INC 51 ++
IDN 51 cCnt
L_UGL_ZAGRADA 51 [
IDN 51 name
L_UGL_ZAGRADA 51 [
ASTERISK 51 *
IDN 51 it
D_UGL_ZAGRADA 51 ]
D_UGL_ZAGRADA 51 ]
TOCKAZAREZ 51 ;
IDN 53 set
OP_LT 53 <
IDN 53 Journal
OP_GT 53 >
IDN 53 S
TOCKAZAREZ 53 ;
KR_FOR 54 for
L_ZAGRADA 54 (
KR_INT 54 int
IDN 54 i
OP_PRIDRUZI 54 =
BROJ 54 0
TOCKAZAREZ 54 ;
IDN 54 i
OP_LT 54 <
L_ZAGRADA 54 (
KR_INT 54 int
D_ZAGRADA 54 )
IDN 54 name
TOCKA 54 .
IDN 54 size
L_ZAGRADA 54 (
D_ZAGRADA 54 )
TOCKAZAREZ 54 ;
OP_INC 54 ++
IDN 54 i
D_ZAGRADA 54 )
IDN 55 S
TOCKA 55 .
IDN 55 insert
L_ZAGRADA 55 (
IDN 55 Journal
L_ZAGRADA 55 (
IDN 55 cCnt
L_UGL_ZAGRADA 55 [
IDN 55 name
L_UGL_ZAGRADA 55 [
IDN 55 i
D_UGL_ZAGRADA 55 ]
D_UGL_ZAGRADA 55 ]
ZAREZ 55 ,
IDN 55 pCnt
L_UGL_ZAGRADA 55 [
IDN 55 name
L_UGL_ZAGRADA 55 [
IDN 55 i
D_UGL_ZAGRADA 55 ]
D_UGL_ZAGRADA 55 ]
ZAREZ 55 ,
IDN 55 name
L_UGL_ZAGRADA 55 [
IDN 55 i
D_UGL_ZAGRADA 55 ]
D_ZAGRADA 55 )
D_ZAGRADA 55 )
TOCKAZAREZ 55 ;
IDN 57 vector
OP_LT 57 <
IDN 57 string
OP_GT 57 >
IDN 57 sol
TOCKAZAREZ 57 ;
KR_FOR 58 for
L_ZAGRADA 58 (
IDN 58 set
OP_LT 58 <
IDN 58 Journal
OP_GT 58 >
IDN 58 const_iterator
IDN 58 it
OP_PRIDRUZI 58 =
IDN 58 S
TOCKA 58 .
IDN 58 begin
L_ZAGRADA 58 (
D_ZAGRADA 58 )
TOCKAZAREZ 58 ;
IDN 58 it
OP_NEQ 58 !=
IDN 58 S
TOCKA 58 .
IDN 58 end
L_ZAGRADA 58 (
D_ZAGRADA 58 )
TOCKAZAREZ 58 ;
OP_INC 58 ++
IDN 58 it
D_ZAGRADA 58 )
IDN 59 sol
TOCKA 59 .
IDN 59 push_back
L_ZAGRADA 59 (
IDN 59 it
MINUS 59 -
OP_GT 59 >
IDN 59 name
D_ZAGRADA 59 )
TOCKAZAREZ 59 ;
KR_RETURN 61 return
IDN 61 sol
TOCKAZAREZ 61 ;
D_VIT_ZAGRADA 62 }
D_VIT_ZAGRADA 63 }
TOCKAZAREZ 63 ;
KR_INT 65 int
IDN 65 main
L_ZAGRADA 65 (
D_ZAGRADA 65 )
L_VIT_ZAGRADA 66 {
IDN 67 AcademicJournal
IDN 67 ___test
TOCKAZAREZ 67 ;
IDN 68 ___test
TOCKA 68 .
IDN 68 run_test
L_ZAGRADA 68 (
MINUS 68 -
BROJ 68 1
D_ZAGRADA 68 )
TOCKAZAREZ 68 ;
D_VIT_ZAGRADA 69 }
