KR_VOID 1 void
IDN 1 foo
L_ZAGRADA 1 (
KR_INT 1 int
IDN 1 x
ZAREZ 1 ,
KR_INT 1 int
IDN 1 c
ZAREZ 1 ,
KR_CHAR 1 char
IDN 1 h
D_ZAGRADA 1 )
TOCKAZAREZ 1 ;
KR_INT 3 int
IDN 3 f
L_ZAGRADA 3 (
KR_VOID 3 void
D_ZAGRADA 3 )
L_VIT_ZAGRADA 3 {
KR_RETURN 4 return
BROJ 4 0
TOCKAZAREZ 4 ;
D_VIT_ZAGRADA 5 }
KR_INT 7 int
IDN 7 x
OP_PRIDRUZI 7 =
BROJ 7 3
TOCKAZAREZ 7 ;
KR_INT 11 int
IDN 11 main
L_ZAGRADA 11 (
KR_VOID 11 void
D_ZAGRADA 11 )
L_VIT_ZAGRADA 11 {
KR_INT 12 int
IDN 12 a
OP_PRIDRUZI 12 =
BROJ 12 5
TOCKAZAREZ 12 ;
KR_CONST 13 const
KR_CHAR 13 char
IDN 13 c
OP_PRIDRUZI 13 =
ZNAK 13 'i'
TOCKAZAREZ 13 ;
KR_INT 14 int
IDN 14 niz
L_UGL_ZAGRADA 14 [
BROJ 14 3
D_UGL_ZAGRADA 14 ]
TOCKAZAREZ 14 ;
KR_VOID 15 void
IDN 15 foo
L_ZAGRADA 15 (
KR_INT 15 int
IDN 15 x
ZAREZ 15 ,
KR_INT 15 int
IDN 15 c
ZAREZ 15 ,
KR_CHAR 15 char
IDN 15 h
D_ZAGRADA 15 )
TOCKAZAREZ 15 ;
KR_INT 16 int
IDN 16 x
OP_PRIDRUZI 16 =
BROJ 16 5
TOCKAZAREZ 16 ;
KR_INT 17 int
IDN 17 y
OP_PRIDRUZI 17 =
IDN 17 x
PLUS 17 +
BROJ 17 1
TOCKAZAREZ 17 ;
IDN 18 a
OP_PRIDRUZI 18 =
IDN 18 a
PLUS 18 +
BROJ 18 3
TOCKAZAREZ 18 ;
KR_IF 20 if
L_ZAGRADA 20 (
IDN 20 a
OP_GT 20 >
BROJ 20 2
D_ZAGRADA 20 )
L_VIT_ZAGRADA 21 {
KR_INT 22 int
IDN 22 a
TOCKAZAREZ 22 ;
KR_INT 23 int
IDN 23 b
TOCKAZAREZ 23 ;
IDN 24 a
OP_PRIDRUZI 24 =
IDN 24 b
TOCKAZAREZ 24 ;
IDN 25 x
OP_PRIDRUZI 25 =
BROJ 25 4
TOCKAZAREZ 25 ;
D_VIT_ZAGRADA 26 }
KR_RETURN 27 return
IDN 27 f
L_ZAGRADA 27 (
D_ZAGRADA 27 )
TOCKAZAREZ 27 ;
D_VIT_ZAGRADA 28 }
KR_INT 30 int
IDN 30 fact
L_ZAGRADA 30 (
KR_INT 30 int
IDN 30 bzvz
D_ZAGRADA 30 )
TOCKAZAREZ 30 ;
KR_VOID 32 void
IDN 32 foo
L_ZAGRADA 32 (
KR_INT 32 int
IDN 32 x
ZAREZ 32 ,
KR_INT 32 int
IDN 32 c
ZAREZ 32 ,
KR_CHAR 32 char
IDN 32 h
D_ZAGRADA 32 )
L_VIT_ZAGRADA 32 {
KR_INT 33 int
IDN 33 i
OP_PRIDRUZI 33 =
IDN 33 fact
L_ZAGRADA 33 (
IDN 33 x
D_ZAGRADA 33 )
TOCKAZAREZ 33 ;
KR_INT 34 int
IDN 34 a
OP_PRIDRUZI 34 =
IDN 34 a
PLUS 34 +
BROJ 34 1
TOCKAZAREZ 34 ;
KR_VOID 35 void
IDN 35 foo3
L_ZAGRADA 35 (
KR_VOID 35 void
D_ZAGRADA 35 )
TOCKAZAREZ 35 ;
KR_INT 36 int
IDN 36 niz1
L_UGL_ZAGRADA 36 [
BROJ 36 5
D_UGL_ZAGRADA 36 ]
OP_PRIDRUZI 36 =
L_VIT_ZAGRADA 36 {
BROJ 36 1
ZAREZ 36 ,
BROJ 36 2
ZAREZ 36 ,
BROJ 36 3
D_VIT_ZAGRADA 36 }
TOCKAZAREZ 36 ;
KR_FOR 39 for
L_ZAGRADA 39 (
IDN 39 i
OP_PRIDRUZI 39 =
BROJ 39 0
TOCKAZAREZ 39 ;
IDN 39 i
OP_LT 39 <
BROJ 39 5
TOCKAZAREZ 39 ;
IDN 39 i
OP_INC 39 ++
D_ZAGRADA 39 )
KR_BREAK 40 break
TOCKAZAREZ 40 ;
KR_WHILE 42 while
L_ZAGRADA 42 (
BROJ 42 1
D_ZAGRADA 42 )
L_VIT_ZAGRADA 43 {
KR_BREAK 44 break
TOCKAZAREZ 44 ;
IDN 45 i
OP_PRIDRUZI 45 =
IDN 45 i
PLUS 45 +
BROJ 45 2
TOCKAZAREZ 45 ;
D_VIT_ZAGRADA 46 }
KR_BREAK 48 break
TOCKAZAREZ 48 ;
KR_RETURN 49 return
TOCKAZAREZ 49 ;
D_VIT_ZAGRADA 51 }
KR_CHAR 53 char
IDN 53 proba3
L_ZAGRADA 53 (
KR_VOID 53 void
D_ZAGRADA 53 )
L_VIT_ZAGRADA 53 {
IDN 54 x
OP_PRIDRUZI 54 =
BROJ 54 4
TOCKAZAREZ 54 ;
KR_IF 55 if
L_ZAGRADA 55 (
BROJ 55 0
D_ZAGRADA 55 )
L_VIT_ZAGRADA 56 {
IDN 57 x
OP_PRIDRUZI 57 =
BROJ 57 6
TOCKAZAREZ 57 ;
KR_RETURN 58 return
ZNAK 58 'a'
TOCKAZAREZ 58 ;
D_VIT_ZAGRADA 59 }
KR_ELSE 59 else
L_VIT_ZAGRADA 59 {
KR_RETURN 60 return
L_ZAGRADA 60 (
KR_CHAR 60 char
D_ZAGRADA 60 )
BROJ 60 97
TOCKAZAREZ 60 ;
D_VIT_ZAGRADA 62 }
D_VIT_ZAGRADA 63 }
KR_CHAR 65 char
IDN 65 proba
L_ZAGRADA 65 (
KR_VOID 65 void
D_ZAGRADA 65 )
L_VIT_ZAGRADA 65 {
KR_RETURN 66 return
L_ZAGRADA 66 (
KR_CHAR 66 char
D_ZAGRADA 66 )
BROJ 66 97
TOCKAZAREZ 66 ;
D_VIT_ZAGRADA 67 }
KR_INT 70 int
IDN 70 proba2
L_ZAGRADA 70 (
KR_VOID 70 void
D_ZAGRADA 70 )
L_VIT_ZAGRADA 70 {
KR_RETURN 72 return
ZNAK 72 'a'
TOCKAZAREZ 72 ;
D_VIT_ZAGRADA 73 }
KR_INT 75 int
IDN 75 fact
L_ZAGRADA 75 (
KR_INT 75 int
IDN 75 n
D_ZAGRADA 75 )
L_VIT_ZAGRADA 75 {
IDN 76 foo
L_ZAGRADA 76 (
BROJ 76 1
ZAREZ 76 ,
BROJ 76 2
ZAREZ 76 ,
ZNAK 76 'h'
D_ZAGRADA 76 )
TOCKAZAREZ 76 ;
KR_IF 77 if
L_ZAGRADA 77 (
IDN 77 n
OP_GT 77 >
BROJ 77 0
D_ZAGRADA 77 )
KR_RETURN 78 return
IDN 78 n
OP_PUTA 78 *
IDN 78 fact
L_ZAGRADA 78 (
IDN 78 n
MINUS 78 -
BROJ 78 1
D_ZAGRADA 78 )
TOCKAZAREZ 78 ;
KR_ELSE 79 else
KR_RETURN 80 return
BROJ 80 1
TOCKAZAREZ 80 ;
D_VIT_ZAGRADA 81 }
KR_VOID 83 void
IDN 83 foo3
L_ZAGRADA 83 (
KR_VOID 83 void
D_ZAGRADA 83 )
L_VIT_ZAGRADA 83 {
KR_INT 84 int
IDN 84 i
OP_PRIDRUZI 84 =
BROJ 84 8
TOCKAZAREZ 84 ;
KR_RETURN 86 return
TOCKAZAREZ 86 ;
D_VIT_ZAGRADA 87 }
KR_VOID 89 void
IDN 89 f2
L_ZAGRADA 89 (
KR_INT 89 int
IDN 89 x
ZAREZ 89 ,
KR_INT 89 int
IDN 89 a
L_UGL_ZAGRADA 89 [
D_UGL_ZAGRADA 89 ]
D_ZAGRADA 89 )
L_VIT_ZAGRADA 89 {
IDN 90 x
OP_PRIDRUZI 90 =
IDN 90 x
PLUS 90 +
BROJ 90 1
TOCKAZAREZ 90 ;
IDN 91 a
L_UGL_ZAGRADA 91 [
BROJ 91 0
D_UGL_ZAGRADA 91 ]
OP_PRIDRUZI 91 =
IDN 91 a
L_UGL_ZAGRADA 91 [
BROJ 91 0
D_UGL_ZAGRADA 91 ]
PLUS 91 +
BROJ 91 1
TOCKAZAREZ 91 ;
D_VIT_ZAGRADA 92 }
KR_INT 103 int
IDN 103 main2
L_ZAGRADA 103 (
KR_VOID 103 void
D_ZAGRADA 103 )
L_VIT_ZAGRADA 103 {
KR_INT 104 int
IDN 104 x
OP_PRIDRUZI 104 =
BROJ 104 2147483647
ZAREZ 104 ,
IDN 104 y
TOCKAZAREZ 104 ;
L_ZAGRADA 106 (
KR_INT 106 int
D_ZAGRADA 106 )
ZNAK 106 'a'
TOCKAZAREZ 106 ;
L_ZAGRADA 107 (
KR_CONST 107 const
KR_CHAR 107 char
D_ZAGRADA 107 )
IDN 107 x
TOCKAZAREZ 107 ;
L_ZAGRADA 108 (
KR_CONST 108 const
KR_INT 108 int
D_ZAGRADA 108 )
ZNAK 108 'a'
TOCKAZAREZ 108 ;
L_ZAGRADA 109 (
KR_CHAR 109 char
D_ZAGRADA 109 )
L_ZAGRADA 109 (
L_ZAGRADA 109 (
KR_CONST 109 const
KR_INT 109 int
D_ZAGRADA 109 )
BROJ 109 300
PLUS 109 +
L_ZAGRADA 109 (
KR_INT 109 int
D_ZAGRADA 109 )
ZNAK 109 'a'
D_ZAGRADA 109 )
TOCKAZAREZ 109 ;
L_ZAGRADA 110 (
KR_INT 110 int
D_ZAGRADA 110 )
L_ZAGRADA 110 (
KR_CHAR 110 char
D_ZAGRADA 110 )
L_ZAGRADA 110 (
KR_CONST 110 const
KR_INT 110 int
D_ZAGRADA 110 )
L_ZAGRADA 110 (
KR_CONST 110 const
KR_CHAR 110 char
D_ZAGRADA 110 )
L_ZAGRADA 110 (
IDN 110 x
PLUS 110 +
IDN 110 y
D_ZAGRADA 110 )
TOCKAZAREZ 110 ;
KR_RETURN 112 return
BROJ 112 0
TOCKAZAREZ 112 ;
D_VIT_ZAGRADA 113 }
