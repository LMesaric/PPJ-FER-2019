KR_VOID 1 void
IDN 1 foo
L_ZAGRADA 1 (
KR_INT 1 int
IDN 1 x
ZAREZ 1 ,
KR_INT 1 int
IDN 1 c
ZAREZ 1 ,
KR_CHAR 1 char
IDN 1 h
D_ZAGRADA 1 )
TOCKAZAREZ 1 ;
KR_INT 3 int
IDN 3 f
L_ZAGRADA 3 (
KR_VOID 3 void
D_ZAGRADA 3 )
L_VIT_ZAGRADA 4 {
KR_RETURN 5 return
BROJ 5 0
TOCKAZAREZ 5 ;
D_VIT_ZAGRADA 6 }
KR_INT 8 int
IDN 8 x
OP_PRIDRUZI 8 =
BROJ 8 3
TOCKAZAREZ 8 ;
KR_INT 10 int
IDN 10 deklaracijaBezDefinicije
L_ZAGRADA 10 (
KR_INT 10 int
IDN 10 x
D_ZAGRADA 10 )
TOCKAZAREZ 10 ;
KR_INT 12 int
IDN 12 main
L_ZAGRADA 12 (
KR_VOID 12 void
D_ZAGRADA 12 )
L_VIT_ZAGRADA 13 {
KR_INT 14 int
IDN 14 a
OP_PRIDRUZI 14 =
BROJ 14 5
TOCKAZAREZ 14 ;
KR_CONST 15 const
KR_CHAR 15 char
IDN 15 c
OP_PRIDRUZI 15 =
ZNAK 15 'i'
TOCKAZAREZ 15 ;
KR_INT 16 int
IDN 16 niz
L_UGL_ZAGRADA 16 [
BROJ 16 3
D_UGL_ZAGRADA 16 ]
TOCKAZAREZ 16 ;
KR_VOID 17 void
IDN 17 foo
L_ZAGRADA 17 (
KR_INT 17 int
IDN 17 x
ZAREZ 17 ,
KR_INT 17 int
IDN 17 c
ZAREZ 17 ,
KR_CHAR 17 char
IDN 17 h
D_ZAGRADA 17 )
TOCKAZAREZ 17 ;
KR_INT 18 int
IDN 18 x
OP_PRIDRUZI 18 =
BROJ 18 5
TOCKAZAREZ 18 ;
KR_INT 19 int
IDN 19 y
OP_PRIDRUZI 19 =
IDN 19 x
PLUS 19 +
BROJ 19 1
TOCKAZAREZ 19 ;
IDN 20 a
OP_PRIDRUZI 20 =
IDN 20 a
PLUS 20 +
BROJ 20 3
TOCKAZAREZ 20 ;
KR_IF 22 if
L_ZAGRADA 22 (
IDN 22 a
OP_GT 22 >
BROJ 22 2
D_ZAGRADA 22 )
L_VIT_ZAGRADA 23 {
KR_INT 24 int
IDN 24 a
TOCKAZAREZ 24 ;
KR_INT 25 int
IDN 25 b
TOCKAZAREZ 25 ;
IDN 26 a
OP_PRIDRUZI 26 =
IDN 26 b
TOCKAZAREZ 26 ;
IDN 27 x
OP_PRIDRUZI 27 =
BROJ 27 4
TOCKAZAREZ 27 ;
D_VIT_ZAGRADA 28 }
KR_RETURN 29 return
IDN 29 f
L_ZAGRADA 29 (
D_ZAGRADA 29 )
TOCKAZAREZ 29 ;
D_VIT_ZAGRADA 30 }
KR_INT 32 int
IDN 32 fact
L_ZAGRADA 32 (
KR_INT 32 int
IDN 32 bzvz
D_ZAGRADA 32 )
TOCKAZAREZ 32 ;
KR_VOID 34 void
IDN 34 foo
L_ZAGRADA 34 (
KR_INT 34 int
IDN 34 x
ZAREZ 34 ,
KR_INT 34 int
IDN 34 c
ZAREZ 34 ,
KR_CHAR 34 char
IDN 34 h
D_ZAGRADA 34 )
L_VIT_ZAGRADA 35 {
KR_INT 36 int
IDN 36 i
OP_PRIDRUZI 36 =
IDN 36 fact
L_ZAGRADA 36 (
IDN 36 x
D_ZAGRADA 36 )
TOCKAZAREZ 36 ;
KR_INT 37 int
IDN 37 a
OP_PRIDRUZI 37 =
IDN 37 a
PLUS 37 +
BROJ 37 1
TOCKAZAREZ 37 ;
KR_VOID 38 void
IDN 38 foo3
L_ZAGRADA 38 (
KR_VOID 38 void
D_ZAGRADA 38 )
TOCKAZAREZ 38 ;
KR_INT 39 int
IDN 39 niz1
L_UGL_ZAGRADA 39 [
BROJ 39 5
D_UGL_ZAGRADA 39 ]
OP_PRIDRUZI 39 =
L_VIT_ZAGRADA 39 {
BROJ 39 1
ZAREZ 39 ,
BROJ 39 2
ZAREZ 39 ,
BROJ 39 3
D_VIT_ZAGRADA 39 }
TOCKAZAREZ 39 ;
KR_FOR 42 for
L_ZAGRADA 42 (
IDN 42 i
OP_PRIDRUZI 42 =
BROJ 42 0
TOCKAZAREZ 42 ;
IDN 42 i
OP_LT 42 <
BROJ 42 5
TOCKAZAREZ 42 ;
IDN 42 i
OP_INC 42 ++
D_ZAGRADA 42 )
KR_BREAK 43 break
TOCKAZAREZ 43 ;
KR_WHILE 44 while
L_ZAGRADA 44 (
BROJ 44 1
D_ZAGRADA 44 )
L_VIT_ZAGRADA 45 {
KR_BREAK 46 break
TOCKAZAREZ 46 ;
IDN 47 i
OP_PRIDRUZI 47 =
IDN 47 i
PLUS 47 +
BROJ 47 2
TOCKAZAREZ 47 ;
D_VIT_ZAGRADA 48 }
KR_RETURN 49 return
BROJ 49 5
TOCKAZAREZ 49 ;
D_VIT_ZAGRADA 52 }
KR_CHAR 54 char
IDN 54 proba3
L_ZAGRADA 54 (
KR_VOID 54 void
D_ZAGRADA 54 )
L_VIT_ZAGRADA 55 {
IDN 56 x
OP_PRIDRUZI 56 =
BROJ 56 4
TOCKAZAREZ 56 ;
KR_IF 57 if
L_ZAGRADA 57 (
BROJ 57 0
D_ZAGRADA 57 )
L_VIT_ZAGRADA 58 {
IDN 59 x
OP_PRIDRUZI 59 =
BROJ 59 6
TOCKAZAREZ 59 ;
KR_RETURN 60 return
ZNAK 60 'a'
TOCKAZAREZ 60 ;
D_VIT_ZAGRADA 61 }
KR_ELSE 61 else
L_VIT_ZAGRADA 61 {
KR_RETURN 62 return
L_ZAGRADA 62 (
KR_CHAR 62 char
D_ZAGRADA 62 )
BROJ 62 97
TOCKAZAREZ 62 ;
D_VIT_ZAGRADA 64 }
D_VIT_ZAGRADA 65 }
KR_CHAR 67 char
IDN 67 proba
L_ZAGRADA 67 (
KR_VOID 67 void
D_ZAGRADA 67 )
L_VIT_ZAGRADA 68 {
KR_RETURN 69 return
L_ZAGRADA 69 (
KR_CHAR 69 char
D_ZAGRADA 69 )
BROJ 69 97
TOCKAZAREZ 69 ;
D_VIT_ZAGRADA 70 }
KR_INT 73 int
IDN 73 proba2
L_ZAGRADA 73 (
KR_VOID 73 void
D_ZAGRADA 73 )
L_VIT_ZAGRADA 74 {
KR_RETURN 76 return
ZNAK 76 'a'
TOCKAZAREZ 76 ;
D_VIT_ZAGRADA 77 }
KR_INT 79 int
IDN 79 fact
L_ZAGRADA 79 (
KR_INT 79 int
IDN 79 n
D_ZAGRADA 79 )
L_VIT_ZAGRADA 80 {
IDN 81 foo
L_ZAGRADA 81 (
BROJ 81 1
ZAREZ 81 ,
BROJ 81 2
ZAREZ 81 ,
ZNAK 81 'h'
D_ZAGRADA 81 )
TOCKAZAREZ 81 ;
KR_IF 82 if
L_ZAGRADA 82 (
IDN 82 n
OP_GT 82 >
BROJ 82 0
D_ZAGRADA 82 )
KR_RETURN 83 return
IDN 83 n
OP_PUTA 83 *
IDN 83 fact
L_ZAGRADA 83 (
IDN 83 n
MINUS 83 -
BROJ 83 1
D_ZAGRADA 83 )
TOCKAZAREZ 83 ;
KR_ELSE 84 else
KR_RETURN 85 return
BROJ 85 1
TOCKAZAREZ 85 ;
D_VIT_ZAGRADA 86 }
KR_VOID 88 void
IDN 88 foo3
L_ZAGRADA 88 (
KR_VOID 88 void
D_ZAGRADA 88 )
L_VIT_ZAGRADA 89 {
KR_INT 90 int
IDN 90 i
OP_PRIDRUZI 90 =
BROJ 90 8
TOCKAZAREZ 90 ;
KR_RETURN 92 return
TOCKAZAREZ 92 ;
D_VIT_ZAGRADA 93 }
KR_VOID 95 void
IDN 95 f2
L_ZAGRADA 95 (
KR_INT 95 int
IDN 95 x
ZAREZ 95 ,
KR_INT 95 int
IDN 95 a
L_UGL_ZAGRADA 95 [
D_UGL_ZAGRADA 95 ]
D_ZAGRADA 95 )
L_VIT_ZAGRADA 95 {
IDN 96 x
OP_PRIDRUZI 96 =
IDN 96 x
PLUS 96 +
BROJ 96 1
TOCKAZAREZ 96 ;
IDN 97 a
L_UGL_ZAGRADA 97 [
BROJ 97 0
D_UGL_ZAGRADA 97 ]
OP_PRIDRUZI 97 =
IDN 97 a
L_UGL_ZAGRADA 97 [
BROJ 97 0
D_UGL_ZAGRADA 97 ]
PLUS 97 +
BROJ 97 1
TOCKAZAREZ 97 ;
D_VIT_ZAGRADA 98 }
KR_INT 109 int
IDN 109 main2
L_ZAGRADA 109 (
KR_VOID 109 void
D_ZAGRADA 109 )
L_VIT_ZAGRADA 109 {
KR_INT 110 int
IDN 110 x
OP_PRIDRUZI 110 =
BROJ 110 2147483647
TOCKAZAREZ 110 ;
KR_INT 111 int
IDN 111 y
TOCKAZAREZ 111 ;
L_ZAGRADA 113 (
KR_INT 113 int
D_ZAGRADA 113 )
ZNAK 113 'a'
TOCKAZAREZ 113 ;
L_ZAGRADA 114 (
KR_CONST 114 const
KR_CHAR 114 char
D_ZAGRADA 114 )
IDN 114 x
TOCKAZAREZ 114 ;
L_ZAGRADA 115 (
KR_CONST 115 const
KR_INT 115 int
D_ZAGRADA 115 )
ZNAK 115 'a'
TOCKAZAREZ 115 ;
L_ZAGRADA 116 (
KR_CHAR 116 char
D_ZAGRADA 116 )
L_ZAGRADA 116 (
L_ZAGRADA 116 (
KR_CONST 116 const
KR_INT 116 int
D_ZAGRADA 116 )
BROJ 116 300
PLUS 116 +
L_ZAGRADA 116 (
KR_INT 116 int
D_ZAGRADA 116 )
ZNAK 116 'a'
D_ZAGRADA 116 )
TOCKAZAREZ 116 ;
L_ZAGRADA 117 (
KR_INT 117 int
D_ZAGRADA 117 )
L_ZAGRADA 117 (
KR_CHAR 117 char
D_ZAGRADA 117 )
L_ZAGRADA 117 (
KR_CONST 117 const
KR_INT 117 int
D_ZAGRADA 117 )
L_ZAGRADA 117 (
KR_CONST 117 const
KR_CHAR 117 char
D_ZAGRADA 117 )
L_ZAGRADA 117 (
IDN 117 x
PLUS 117 +
IDN 117 y
D_ZAGRADA 117 )
TOCKAZAREZ 117 ;
KR_RETURN 119 return
BROJ 119 0
TOCKAZAREZ 119 ;
D_VIT_ZAGRADA 120 }
