KR_VOID 1 void
IDN 1 foo
L_ZAGRADA 1 (
KR_INT 1 int
IDN 1 x
ZAREZ 1 ,
KR_INT 1 int
IDN 1 c
ZAREZ 1 ,
KR_CHAR 1 char
IDN 1 h
D_ZAGRADA 1 )
TOCKAZAREZ 1 ;
KR_INT 3 int
IDN 3 f
L_ZAGRADA 3 (
KR_VOID 3 void
D_ZAGRADA 3 )
L_VIT_ZAGRADA 3 {
KR_RETURN 4 return
BROJ 4 0
TOCKAZAREZ 4 ;
D_VIT_ZAGRADA 5 }
KR_INT 7 int
IDN 7 x
OP_PRIDRUZI 7 =
BROJ 7 3
TOCKAZAREZ 7 ;
KR_INT 11 int
IDN 11 main
L_ZAGRADA 11 (
KR_VOID 11 void
D_ZAGRADA 11 )
L_VIT_ZAGRADA 11 {
KR_INT 12 int
IDN 12 a
OP_PRIDRUZI 12 =
BROJ 12 5
TOCKAZAREZ 12 ;
KR_CONST 13 const
KR_CHAR 13 char
IDN 13 c
OP_PRIDRUZI 13 =
ZNAK 13 'i'
TOCKAZAREZ 13 ;
KR_INT 14 int
IDN 14 niz
L_UGL_ZAGRADA 14 [
BROJ 14 3
D_UGL_ZAGRADA 14 ]
TOCKAZAREZ 14 ;
KR_VOID 15 void
IDN 15 foo
L_ZAGRADA 15 (
KR_INT 15 int
IDN 15 x
ZAREZ 15 ,
KR_INT 15 int
IDN 15 c
ZAREZ 15 ,
KR_CHAR 15 char
IDN 15 h
D_ZAGRADA 15 )
TOCKAZAREZ 15 ;
KR_INT 16 int
IDN 16 x
OP_PRIDRUZI 16 =
BROJ 16 5
TOCKAZAREZ 16 ;
KR_INT 17 int
IDN 17 y
OP_PRIDRUZI 17 =
IDN 17 x
PLUS 17 +
BROJ 17 1
TOCKAZAREZ 17 ;
IDN 18 a
OP_PRIDRUZI 18 =
IDN 18 a
PLUS 18 +
BROJ 18 3
TOCKAZAREZ 18 ;
KR_IF 20 if
L_ZAGRADA 20 (
IDN 20 a
OP_GT 20 >
BROJ 20 2
D_ZAGRADA 20 )
L_VIT_ZAGRADA 21 {
KR_INT 22 int
IDN 22 a
TOCKAZAREZ 22 ;
KR_INT 23 int
IDN 23 b
TOCKAZAREZ 23 ;
IDN 24 a
OP_PRIDRUZI 24 =
IDN 24 b
TOCKAZAREZ 24 ;
IDN 25 x
OP_PRIDRUZI 25 =
BROJ 25 4
TOCKAZAREZ 25 ;
D_VIT_ZAGRADA 26 }
KR_RETURN 27 return
IDN 27 f
L_ZAGRADA 27 (
D_ZAGRADA 27 )
TOCKAZAREZ 27 ;
D_VIT_ZAGRADA 28 }
KR_INT 30 int
IDN 30 fact
L_ZAGRADA 30 (
KR_INT 30 int
IDN 30 bzvz
D_ZAGRADA 30 )
TOCKAZAREZ 30 ;
KR_VOID 32 void
IDN 32 foo
L_ZAGRADA 32 (
KR_INT 32 int
IDN 32 x
ZAREZ 32 ,
KR_INT 32 int
IDN 32 c
ZAREZ 32 ,
KR_CHAR 32 char
IDN 32 h
D_ZAGRADA 32 )
L_VIT_ZAGRADA 32 {
KR_INT 33 int
IDN 33 i
OP_PRIDRUZI 33 =
IDN 33 fact
L_ZAGRADA 33 (
IDN 33 x
D_ZAGRADA 33 )
TOCKAZAREZ 33 ;
KR_INT 34 int
IDN 34 a
OP_PRIDRUZI 34 =
IDN 34 a
PLUS 34 +
BROJ 34 1
TOCKAZAREZ 34 ;
KR_VOID 35 void
IDN 35 foo3
L_ZAGRADA 35 (
KR_VOID 35 void
D_ZAGRADA 35 )
TOCKAZAREZ 35 ;
KR_INT 37 int
IDN 37 niz1
L_UGL_ZAGRADA 37 [
BROJ 37 5
D_UGL_ZAGRADA 37 ]
OP_PRIDRUZI 37 =
L_VIT_ZAGRADA 37 {
BROJ 37 1
ZAREZ 37 ,
BROJ 37 2
ZAREZ 37 ,
BROJ 37 3
D_VIT_ZAGRADA 37 }
TOCKAZAREZ 37 ;
KR_FOR 40 for
L_ZAGRADA 40 (
IDN 40 i
OP_PRIDRUZI 40 =
BROJ 40 0
TOCKAZAREZ 40 ;
IDN 40 i
OP_LT 40 <
BROJ 40 5
TOCKAZAREZ 40 ;
IDN 40 i
OP_INC 40 ++
D_ZAGRADA 40 )
KR_BREAK 41 break
TOCKAZAREZ 41 ;
KR_BREAK 42 break
TOCKAZAREZ 42 ;
KR_WHILE 43 while
L_ZAGRADA 43 (
BROJ 43 1
D_ZAGRADA 43 )
L_VIT_ZAGRADA 44 {
KR_BREAK 45 break
TOCKAZAREZ 45 ;
IDN 46 i
OP_PRIDRUZI 46 =
IDN 46 i
PLUS 46 +
BROJ 46 2
TOCKAZAREZ 46 ;
D_VIT_ZAGRADA 47 }
KR_RETURN 51 return
TOCKAZAREZ 51 ;
D_VIT_ZAGRADA 53 }
KR_CHAR 55 char
IDN 55 proba3
L_ZAGRADA 55 (
KR_VOID 55 void
D_ZAGRADA 55 )
L_VIT_ZAGRADA 55 {
IDN 56 x
OP_PRIDRUZI 56 =
BROJ 56 4
TOCKAZAREZ 56 ;
KR_IF 57 if
L_ZAGRADA 57 (
BROJ 57 0
D_ZAGRADA 57 )
L_VIT_ZAGRADA 58 {
IDN 59 x
OP_PRIDRUZI 59 =
BROJ 59 6
TOCKAZAREZ 59 ;
KR_RETURN 60 return
ZNAK 60 'a'
TOCKAZAREZ 60 ;
D_VIT_ZAGRADA 61 }
KR_ELSE 61 else
L_VIT_ZAGRADA 61 {
KR_RETURN 62 return
L_ZAGRADA 62 (
KR_CHAR 62 char
D_ZAGRADA 62 )
BROJ 62 97
TOCKAZAREZ 62 ;
D_VIT_ZAGRADA 64 }
D_VIT_ZAGRADA 65 }
KR_CHAR 67 char
IDN 67 proba
L_ZAGRADA 67 (
KR_VOID 67 void
D_ZAGRADA 67 )
L_VIT_ZAGRADA 67 {
KR_RETURN 68 return
L_ZAGRADA 68 (
KR_CHAR 68 char
D_ZAGRADA 68 )
BROJ 68 97
TOCKAZAREZ 68 ;
D_VIT_ZAGRADA 69 }
KR_INT 72 int
IDN 72 proba2
L_ZAGRADA 72 (
KR_VOID 72 void
D_ZAGRADA 72 )
L_VIT_ZAGRADA 72 {
KR_RETURN 74 return
ZNAK 74 'a'
TOCKAZAREZ 74 ;
D_VIT_ZAGRADA 75 }
KR_INT 77 int
IDN 77 fact
L_ZAGRADA 77 (
KR_INT 77 int
IDN 77 n
D_ZAGRADA 77 )
L_VIT_ZAGRADA 77 {
IDN 78 foo
L_ZAGRADA 78 (
BROJ 78 1
ZAREZ 78 ,
BROJ 78 2
ZAREZ 78 ,
ZNAK 78 'h'
D_ZAGRADA 78 )
TOCKAZAREZ 78 ;
KR_IF 79 if
L_ZAGRADA 79 (
IDN 79 n
OP_GT 79 >
BROJ 79 0
D_ZAGRADA 79 )
KR_RETURN 80 return
IDN 80 n
OP_PUTA 80 *
IDN 80 fact
L_ZAGRADA 80 (
IDN 80 n
MINUS 80 -
BROJ 80 1
D_ZAGRADA 80 )
TOCKAZAREZ 80 ;
KR_ELSE 81 else
KR_RETURN 82 return
BROJ 82 1
TOCKAZAREZ 82 ;
D_VIT_ZAGRADA 83 }
KR_VOID 85 void
IDN 85 foo3
L_ZAGRADA 85 (
KR_VOID 85 void
D_ZAGRADA 85 )
L_VIT_ZAGRADA 85 {
KR_INT 86 int
IDN 86 i
OP_PRIDRUZI 86 =
BROJ 86 8
TOCKAZAREZ 86 ;
KR_RETURN 88 return
TOCKAZAREZ 88 ;
D_VIT_ZAGRADA 89 }
KR_VOID 91 void
IDN 91 f2
L_ZAGRADA 91 (
KR_INT 91 int
IDN 91 x
ZAREZ 91 ,
KR_INT 91 int
IDN 91 a
L_UGL_ZAGRADA 91 [
D_UGL_ZAGRADA 91 ]
D_ZAGRADA 91 )
L_VIT_ZAGRADA 91 {
IDN 92 x
OP_PRIDRUZI 92 =
IDN 92 x
PLUS 92 +
BROJ 92 1
TOCKAZAREZ 92 ;
IDN 93 a
L_UGL_ZAGRADA 93 [
BROJ 93 0
D_UGL_ZAGRADA 93 ]
OP_PRIDRUZI 93 =
IDN 93 a
L_UGL_ZAGRADA 93 [
BROJ 93 0
D_UGL_ZAGRADA 93 ]
PLUS 93 +
BROJ 93 1
TOCKAZAREZ 93 ;
D_VIT_ZAGRADA 94 }
KR_INT 105 int
IDN 105 main2
L_ZAGRADA 105 (
KR_VOID 105 void
D_ZAGRADA 105 )
L_VIT_ZAGRADA 105 {
KR_INT 106 int
IDN 106 x
OP_PRIDRUZI 106 =
BROJ 106 2147483647
ZAREZ 106 ,
IDN 106 y
TOCKAZAREZ 106 ;
L_ZAGRADA 108 (
KR_INT 108 int
D_ZAGRADA 108 )
ZNAK 108 'a'
TOCKAZAREZ 108 ;
L_ZAGRADA 109 (
KR_CONST 109 const
KR_CHAR 109 char
D_ZAGRADA 109 )
IDN 109 x
TOCKAZAREZ 109 ;
L_ZAGRADA 110 (
KR_CONST 110 const
KR_INT 110 int
D_ZAGRADA 110 )
ZNAK 110 'a'
TOCKAZAREZ 110 ;
L_ZAGRADA 111 (
KR_CHAR 111 char
D_ZAGRADA 111 )
L_ZAGRADA 111 (
L_ZAGRADA 111 (
KR_CONST 111 const
KR_INT 111 int
D_ZAGRADA 111 )
BROJ 111 300
PLUS 111 +
L_ZAGRADA 111 (
KR_INT 111 int
D_ZAGRADA 111 )
ZNAK 111 'a'
D_ZAGRADA 111 )
TOCKAZAREZ 111 ;
L_ZAGRADA 112 (
KR_INT 112 int
D_ZAGRADA 112 )
L_ZAGRADA 112 (
KR_CHAR 112 char
D_ZAGRADA 112 )
L_ZAGRADA 112 (
KR_CONST 112 const
KR_INT 112 int
D_ZAGRADA 112 )
L_ZAGRADA 112 (
KR_CONST 112 const
KR_CHAR 112 char
D_ZAGRADA 112 )
L_ZAGRADA 112 (
IDN 112 x
PLUS 112 +
IDN 112 y
D_ZAGRADA 112 )
TOCKAZAREZ 112 ;
KR_RETURN 114 return
BROJ 114 0
TOCKAZAREZ 114 ;
D_VIT_ZAGRADA 115 }
