KR_VOID 1 void
IDN 1 foo
L_ZAGRADA 1 (
KR_INT 1 int
IDN 1 x
ZAREZ 1 ,
KR_INT 1 int
IDN 1 c
ZAREZ 1 ,
KR_CHAR 1 char
IDN 1 h
D_ZAGRADA 1 )
TOCKAZAREZ 1 ;
KR_INT 3 int
IDN 3 f
L_ZAGRADA 3 (
KR_VOID 3 void
D_ZAGRADA 3 )
L_VIT_ZAGRADA 3 {
KR_RETURN 4 return
BROJ 4 0
TOCKAZAREZ 4 ;
D_VIT_ZAGRADA 5 }
KR_INT 7 int
IDN 7 x
OP_PRIDRUZI 7 =
BROJ 7 3
TOCKAZAREZ 7 ;
KR_INT 11 int
IDN 11 main
L_ZAGRADA 11 (
KR_VOID 11 void
D_ZAGRADA 11 )
L_VIT_ZAGRADA 11 {
KR_INT 12 int
IDN 12 a
OP_PRIDRUZI 12 =
BROJ 12 5
TOCKAZAREZ 12 ;
KR_CONST 13 const
KR_CHAR 13 char
IDN 13 c
OP_PRIDRUZI 13 =
ZNAK 13 'i'
TOCKAZAREZ 13 ;
KR_INT 14 int
IDN 14 niz
L_UGL_ZAGRADA 14 [
BROJ 14 3
D_UGL_ZAGRADA 14 ]
TOCKAZAREZ 14 ;
KR_VOID 15 void
IDN 15 foo
L_ZAGRADA 15 (
KR_INT 15 int
IDN 15 x
ZAREZ 15 ,
KR_INT 15 int
IDN 15 c
ZAREZ 15 ,
KR_CHAR 15 char
IDN 15 h
D_ZAGRADA 15 )
TOCKAZAREZ 15 ;
KR_INT 16 int
IDN 16 x
OP_PRIDRUZI 16 =
BROJ 16 5
TOCKAZAREZ 16 ;
KR_INT 17 int
IDN 17 y
OP_PRIDRUZI 17 =
IDN 17 x
PLUS 17 +
BROJ 17 1
TOCKAZAREZ 17 ;
IDN 18 a
OP_PRIDRUZI 18 =
IDN 18 a
PLUS 18 +
BROJ 18 3
TOCKAZAREZ 18 ;
KR_IF 20 if
L_ZAGRADA 20 (
IDN 20 a
OP_GT 20 >
BROJ 20 2
D_ZAGRADA 20 )
L_VIT_ZAGRADA 21 {
KR_INT 22 int
IDN 22 a
TOCKAZAREZ 22 ;
KR_INT 23 int
IDN 23 b
TOCKAZAREZ 23 ;
IDN 24 a
OP_PRIDRUZI 24 =
IDN 24 b
TOCKAZAREZ 24 ;
IDN 25 x
OP_PRIDRUZI 25 =
BROJ 25 4
TOCKAZAREZ 25 ;
D_VIT_ZAGRADA 26 }
KR_RETURN 27 return
IDN 27 f
L_ZAGRADA 27 (
D_ZAGRADA 27 )
TOCKAZAREZ 27 ;
D_VIT_ZAGRADA 28 }
KR_INT 30 int
IDN 30 fact
L_ZAGRADA 30 (
KR_INT 30 int
IDN 30 bzvz
D_ZAGRADA 30 )
TOCKAZAREZ 30 ;
KR_VOID 32 void
IDN 32 foo
L_ZAGRADA 32 (
KR_INT 32 int
IDN 32 x
ZAREZ 32 ,
KR_INT 32 int
IDN 32 c
ZAREZ 32 ,
KR_CHAR 32 char
IDN 32 h
D_ZAGRADA 32 )
L_VIT_ZAGRADA 32 {
KR_INT 33 int
IDN 33 i
OP_PRIDRUZI 33 =
IDN 33 fact
L_ZAGRADA 33 (
IDN 33 x
D_ZAGRADA 33 )
TOCKAZAREZ 33 ;
KR_INT 34 int
IDN 34 a
OP_PRIDRUZI 34 =
IDN 34 a
PLUS 34 +
BROJ 34 1
TOCKAZAREZ 34 ;
KR_VOID 35 void
IDN 35 foo3
L_ZAGRADA 35 (
KR_VOID 35 void
D_ZAGRADA 35 )
TOCKAZAREZ 35 ;
KR_INT 36 int
IDN 36 niz1
L_UGL_ZAGRADA 36 [
BROJ 36 5
D_UGL_ZAGRADA 36 ]
OP_PRIDRUZI 36 =
L_VIT_ZAGRADA 36 {
BROJ 36 1
ZAREZ 36 ,
BROJ 36 2
ZAREZ 36 ,
BROJ 36 3
D_VIT_ZAGRADA 36 }
TOCKAZAREZ 36 ;
KR_FOR 39 for
L_ZAGRADA 39 (
IDN 39 i
OP_PRIDRUZI 39 =
BROJ 39 0
TOCKAZAREZ 39 ;
IDN 39 i
OP_LT 39 <
BROJ 39 5
TOCKAZAREZ 39 ;
IDN 39 i
OP_INC 39 ++
D_ZAGRADA 39 )
KR_BREAK 40 break
TOCKAZAREZ 40 ;
KR_WHILE 41 while
L_ZAGRADA 41 (
BROJ 41 1
D_ZAGRADA 41 )
L_VIT_ZAGRADA 42 {
KR_BREAK 43 break
TOCKAZAREZ 43 ;
IDN 44 i
OP_PRIDRUZI 44 =
IDN 44 i
PLUS 44 +
BROJ 44 2
TOCKAZAREZ 44 ;
D_VIT_ZAGRADA 45 }
KR_RETURN 47 return
TOCKAZAREZ 47 ;
D_VIT_ZAGRADA 49 }
KR_CHAR 51 char
IDN 51 proba3
L_ZAGRADA 51 (
KR_VOID 51 void
D_ZAGRADA 51 )
L_VIT_ZAGRADA 51 {
IDN 52 x
OP_PRIDRUZI 52 =
BROJ 52 4
TOCKAZAREZ 52 ;
KR_IF 53 if
L_ZAGRADA 53 (
BROJ 53 0
D_ZAGRADA 53 )
L_VIT_ZAGRADA 54 {
IDN 55 x
OP_PRIDRUZI 55 =
BROJ 55 6
TOCKAZAREZ 55 ;
KR_RETURN 56 return
ZNAK 56 'a'
TOCKAZAREZ 56 ;
D_VIT_ZAGRADA 57 }
KR_ELSE 57 else
L_VIT_ZAGRADA 57 {
KR_RETURN 58 return
L_ZAGRADA 58 (
KR_CHAR 58 char
D_ZAGRADA 58 )
BROJ 58 97
TOCKAZAREZ 58 ;
D_VIT_ZAGRADA 60 }
D_VIT_ZAGRADA 61 }
KR_CHAR 63 char
IDN 63 proba
L_ZAGRADA 63 (
KR_VOID 63 void
D_ZAGRADA 63 )
L_VIT_ZAGRADA 63 {
KR_RETURN 64 return
L_ZAGRADA 64 (
KR_CHAR 64 char
D_ZAGRADA 64 )
BROJ 64 97
TOCKAZAREZ 64 ;
D_VIT_ZAGRADA 65 }
KR_INT 68 int
IDN 68 proba2
L_ZAGRADA 68 (
KR_VOID 68 void
D_ZAGRADA 68 )
L_VIT_ZAGRADA 68 {
KR_RETURN 70 return
ZNAK 70 'a'
TOCKAZAREZ 70 ;
D_VIT_ZAGRADA 71 }
KR_INT 73 int
IDN 73 fact
L_ZAGRADA 73 (
KR_INT 73 int
IDN 73 n
D_ZAGRADA 73 )
L_VIT_ZAGRADA 73 {
IDN 74 foo
L_ZAGRADA 74 (
BROJ 74 1
ZAREZ 74 ,
BROJ 74 2
ZAREZ 74 ,
ZNAK 74 'h'
D_ZAGRADA 74 )
TOCKAZAREZ 74 ;
KR_IF 75 if
L_ZAGRADA 75 (
IDN 75 n
OP_GT 75 >
BROJ 75 0
D_ZAGRADA 75 )
KR_RETURN 76 return
IDN 76 n
OP_PUTA 76 *
IDN 76 fact
L_ZAGRADA 76 (
IDN 76 n
MINUS 76 -
BROJ 76 1
D_ZAGRADA 76 )
TOCKAZAREZ 76 ;
KR_ELSE 77 else
KR_RETURN 78 return
BROJ 78 1
TOCKAZAREZ 78 ;
D_VIT_ZAGRADA 79 }
KR_VOID 81 void
IDN 81 foo3
L_ZAGRADA 81 (
KR_VOID 81 void
D_ZAGRADA 81 )
L_VIT_ZAGRADA 81 {
KR_INT 82 int
IDN 82 i
OP_PRIDRUZI 82 =
BROJ 82 8
TOCKAZAREZ 82 ;
KR_RETURN 84 return
TOCKAZAREZ 84 ;
D_VIT_ZAGRADA 85 }
KR_VOID 87 void
IDN 87 f2
L_ZAGRADA 87 (
KR_INT 87 int
IDN 87 x
ZAREZ 87 ,
KR_INT 87 int
IDN 87 a
L_UGL_ZAGRADA 87 [
D_UGL_ZAGRADA 87 ]
D_ZAGRADA 87 )
L_VIT_ZAGRADA 87 {
IDN 88 x
OP_PRIDRUZI 88 =
IDN 88 x
PLUS 88 +
BROJ 88 1
TOCKAZAREZ 88 ;
IDN 89 a
L_UGL_ZAGRADA 89 [
BROJ 89 0
D_UGL_ZAGRADA 89 ]
OP_PRIDRUZI 89 =
IDN 89 a
L_UGL_ZAGRADA 89 [
BROJ 89 0
D_UGL_ZAGRADA 89 ]
PLUS 89 +
BROJ 89 1
TOCKAZAREZ 89 ;
D_VIT_ZAGRADA 90 }
KR_CHAR 99 char
IDN 99 f2
TOCKAZAREZ 99 ;
KR_INT 101 int
IDN 101 main2
L_ZAGRADA 101 (
KR_VOID 101 void
D_ZAGRADA 101 )
L_VIT_ZAGRADA 101 {
KR_INT 102 int
IDN 102 x
OP_PRIDRUZI 102 =
BROJ 102 2147483647
ZAREZ 102 ,
IDN 102 y
TOCKAZAREZ 102 ;
KR_INT 103 int
IDN 103 a
OP_PRIDRUZI 103 =
BROJ 103 2147483648
TOCKAZAREZ 103 ;
L_ZAGRADA 104 (
KR_INT 104 int
D_ZAGRADA 104 )
ZNAK 104 'a'
TOCKAZAREZ 104 ;
L_ZAGRADA 105 (
KR_CONST 105 const
KR_CHAR 105 char
D_ZAGRADA 105 )
IDN 105 x
TOCKAZAREZ 105 ;
L_ZAGRADA 106 (
KR_CONST 106 const
KR_INT 106 int
D_ZAGRADA 106 )
ZNAK 106 'a'
TOCKAZAREZ 106 ;
L_ZAGRADA 107 (
KR_CHAR 107 char
D_ZAGRADA 107 )
L_ZAGRADA 107 (
L_ZAGRADA 107 (
KR_CONST 107 const
KR_INT 107 int
D_ZAGRADA 107 )
BROJ 107 300
PLUS 107 +
L_ZAGRADA 107 (
KR_INT 107 int
D_ZAGRADA 107 )
ZNAK 107 'a'
D_ZAGRADA 107 )
TOCKAZAREZ 107 ;
L_ZAGRADA 108 (
KR_INT 108 int
D_ZAGRADA 108 )
L_ZAGRADA 108 (
KR_CHAR 108 char
D_ZAGRADA 108 )
L_ZAGRADA 108 (
KR_CONST 108 const
KR_INT 108 int
D_ZAGRADA 108 )
L_ZAGRADA 108 (
KR_CONST 108 const
KR_CHAR 108 char
D_ZAGRADA 108 )
L_ZAGRADA 108 (
IDN 108 x
PLUS 108 +
IDN 108 y
D_ZAGRADA 108 )
TOCKAZAREZ 108 ;
KR_RETURN 110 return
BROJ 110 0
TOCKAZAREZ 110 ;
D_VIT_ZAGRADA 111 }
