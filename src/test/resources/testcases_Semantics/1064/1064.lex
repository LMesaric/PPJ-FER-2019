KR_VOID 17 void
IDN 17 foo
L_ZAGRADA 17 (
KR_INT 17 int
IDN 17 x
ZAREZ 17 ,
KR_INT 17 int
IDN 17 c
ZAREZ 17 ,
KR_CHAR 17 char
IDN 17 h
D_ZAGRADA 17 )
TOCKAZAREZ 17 ;
KR_INT 19 int
IDN 19 f
L_ZAGRADA 19 (
KR_VOID 19 void
D_ZAGRADA 19 )
L_VIT_ZAGRADA 20 {
KR_RETURN 21 return
BROJ 21 0
TOCKAZAREZ 21 ;
D_VIT_ZAGRADA 22 }
KR_INT 24 int
IDN 24 x
OP_PRIDRUZI 24 =
BROJ 24 3
TOCKAZAREZ 24 ;
KR_INT 28 int
IDN 28 main
L_ZAGRADA 28 (
KR_VOID 28 void
D_ZAGRADA 28 )
L_VIT_ZAGRADA 29 {
KR_INT 30 int
IDN 30 a
OP_PRIDRUZI 30 =
BROJ 30 5
TOCKAZAREZ 30 ;
KR_CONST 31 const
KR_CHAR 31 char
IDN 31 c
OP_PRIDRUZI 31 =
ZNAK 31 'i'
TOCKAZAREZ 31 ;
KR_INT 32 int
IDN 32 niz
L_UGL_ZAGRADA 32 [
BROJ 32 3
D_UGL_ZAGRADA 32 ]
TOCKAZAREZ 32 ;
KR_VOID 33 void
IDN 33 foo
L_ZAGRADA 33 (
KR_INT 33 int
IDN 33 x
ZAREZ 33 ,
KR_INT 33 int
IDN 33 c
ZAREZ 33 ,
KR_CHAR 33 char
IDN 33 h
D_ZAGRADA 33 )
TOCKAZAREZ 33 ;
KR_INT 34 int
IDN 34 x
OP_PRIDRUZI 34 =
BROJ 34 5
TOCKAZAREZ 34 ;
KR_INT 35 int
IDN 35 y
OP_PRIDRUZI 35 =
IDN 35 x
PLUS 35 +
BROJ 35 1
TOCKAZAREZ 35 ;
IDN 36 a
OP_PRIDRUZI 36 =
IDN 36 a
PLUS 36 +
BROJ 36 3
TOCKAZAREZ 36 ;
KR_IF 38 if
L_ZAGRADA 38 (
IDN 38 a
OP_GT 38 >
BROJ 38 2
D_ZAGRADA 38 )
L_VIT_ZAGRADA 39 {
KR_INT 40 int
IDN 40 a
TOCKAZAREZ 40 ;
KR_INT 41 int
IDN 41 b
TOCKAZAREZ 41 ;
IDN 42 a
OP_PRIDRUZI 42 =
IDN 42 b
TOCKAZAREZ 42 ;
IDN 43 x
OP_PRIDRUZI 43 =
BROJ 43 4
TOCKAZAREZ 43 ;
D_VIT_ZAGRADA 44 }
KR_RETURN 45 return
IDN 45 f
L_ZAGRADA 45 (
D_ZAGRADA 45 )
TOCKAZAREZ 45 ;
D_VIT_ZAGRADA 46 }
KR_INT 48 int
IDN 48 fact
L_ZAGRADA 48 (
KR_INT 48 int
IDN 48 bzvz
D_ZAGRADA 48 )
TOCKAZAREZ 48 ;
KR_VOID 50 void
IDN 50 foo
L_ZAGRADA 50 (
KR_INT 50 int
IDN 50 x
ZAREZ 50 ,
KR_INT 50 int
IDN 50 c
ZAREZ 50 ,
KR_CHAR 50 char
IDN 50 h
D_ZAGRADA 50 )
L_VIT_ZAGRADA 51 {
KR_INT 52 int
IDN 52 i
OP_PRIDRUZI 52 =
IDN 52 fact
L_ZAGRADA 52 (
IDN 52 x
D_ZAGRADA 52 )
TOCKAZAREZ 52 ;
KR_INT 53 int
IDN 53 a
OP_PRIDRUZI 53 =
IDN 53 a
PLUS 53 +
BROJ 53 1
TOCKAZAREZ 53 ;
KR_VOID 54 void
IDN 54 foo3
L_ZAGRADA 54 (
KR_VOID 54 void
D_ZAGRADA 54 )
TOCKAZAREZ 54 ;
KR_INT 55 int
IDN 55 niz1
L_UGL_ZAGRADA 55 [
BROJ 55 5
D_UGL_ZAGRADA 55 ]
OP_PRIDRUZI 55 =
L_VIT_ZAGRADA 55 {
BROJ 55 1
ZAREZ 55 ,
BROJ 55 2
ZAREZ 55 ,
BROJ 55 3
D_VIT_ZAGRADA 55 }
TOCKAZAREZ 55 ;
KR_FOR 57 for
L_ZAGRADA 57 (
IDN 57 i
OP_PRIDRUZI 57 =
BROJ 57 0
TOCKAZAREZ 57 ;
IDN 57 i
OP_LT 57 <
BROJ 57 5
TOCKAZAREZ 57 ;
IDN 57 i
OP_INC 57 ++
D_ZAGRADA 57 )
KR_BREAK 58 break
TOCKAZAREZ 58 ;
KR_WHILE 59 while
L_ZAGRADA 59 (
BROJ 59 1
D_ZAGRADA 59 )
L_VIT_ZAGRADA 60 {
KR_BREAK 61 break
TOCKAZAREZ 61 ;
IDN 62 i
OP_PRIDRUZI 62 =
IDN 62 i
PLUS 62 +
BROJ 62 2
TOCKAZAREZ 62 ;
D_VIT_ZAGRADA 63 }
KR_RETURN 65 return
TOCKAZAREZ 65 ;
D_VIT_ZAGRADA 67 }
KR_CHAR 69 char
IDN 69 proba3
L_ZAGRADA 69 (
KR_VOID 69 void
D_ZAGRADA 69 )
L_VIT_ZAGRADA 70 {
IDN 71 x
OP_PRIDRUZI 71 =
BROJ 71 4
TOCKAZAREZ 71 ;
KR_IF 72 if
L_ZAGRADA 72 (
BROJ 72 0
D_ZAGRADA 72 )
L_VIT_ZAGRADA 73 {
IDN 74 x
OP_PRIDRUZI 74 =
BROJ 74 6
TOCKAZAREZ 74 ;
KR_RETURN 75 return
ZNAK 75 'a'
TOCKAZAREZ 75 ;
D_VIT_ZAGRADA 76 }
KR_ELSE 76 else
L_VIT_ZAGRADA 76 {
KR_RETURN 77 return
L_ZAGRADA 77 (
KR_CHAR 77 char
D_ZAGRADA 77 )
BROJ 77 97
TOCKAZAREZ 77 ;
D_VIT_ZAGRADA 79 }
D_VIT_ZAGRADA 80 }
KR_CHAR 82 char
IDN 82 proba
L_ZAGRADA 82 (
KR_VOID 82 void
D_ZAGRADA 82 )
L_VIT_ZAGRADA 83 {
KR_RETURN 84 return
L_ZAGRADA 84 (
KR_CHAR 84 char
D_ZAGRADA 84 )
BROJ 84 97
TOCKAZAREZ 84 ;
D_VIT_ZAGRADA 85 }
KR_INT 88 int
IDN 88 proba2
L_ZAGRADA 88 (
KR_VOID 88 void
D_ZAGRADA 88 )
L_VIT_ZAGRADA 89 {
KR_RETURN 91 return
ZNAK 91 'a'
TOCKAZAREZ 91 ;
D_VIT_ZAGRADA 92 }
KR_INT 94 int
IDN 94 fact
L_ZAGRADA 94 (
KR_INT 94 int
IDN 94 n
D_ZAGRADA 94 )
L_VIT_ZAGRADA 95 {
IDN 96 foo
L_ZAGRADA 96 (
BROJ 96 1
ZAREZ 96 ,
BROJ 96 2
ZAREZ 96 ,
ZNAK 96 'h'
D_ZAGRADA 96 )
TOCKAZAREZ 96 ;
KR_IF 97 if
L_ZAGRADA 97 (
IDN 97 n
OP_GT 97 >
BROJ 97 0
D_ZAGRADA 97 )
KR_RETURN 98 return
IDN 98 n
OP_PUTA 98 *
IDN 98 fact
L_ZAGRADA 98 (
IDN 98 n
MINUS 98 -
BROJ 98 1
D_ZAGRADA 98 )
TOCKAZAREZ 98 ;
KR_ELSE 99 else
KR_RETURN 100 return
BROJ 100 1
TOCKAZAREZ 100 ;
D_VIT_ZAGRADA 101 }
KR_VOID 103 void
IDN 103 foo3
L_ZAGRADA 103 (
KR_VOID 103 void
D_ZAGRADA 103 )
L_VIT_ZAGRADA 104 {
KR_INT 105 int
IDN 105 i
OP_PRIDRUZI 105 =
BROJ 105 8
TOCKAZAREZ 105 ;
KR_RETURN 107 return
TOCKAZAREZ 107 ;
D_VIT_ZAGRADA 108 }
KR_VOID 110 void
IDN 110 f2
L_ZAGRADA 110 (
KR_INT 110 int
IDN 110 x
ZAREZ 110 ,
KR_INT 110 int
IDN 110 a
L_UGL_ZAGRADA 110 [
D_UGL_ZAGRADA 110 ]
D_ZAGRADA 110 )
L_VIT_ZAGRADA 110 {
IDN 111 x
OP_PRIDRUZI 111 =
IDN 111 x
PLUS 111 +
BROJ 111 1
TOCKAZAREZ 111 ;
IDN 112 a
L_UGL_ZAGRADA 112 [
BROJ 112 0
D_UGL_ZAGRADA 112 ]
OP_PRIDRUZI 112 =
IDN 112 a
L_UGL_ZAGRADA 112 [
BROJ 112 0
D_UGL_ZAGRADA 112 ]
PLUS 112 +
BROJ 112 1
TOCKAZAREZ 112 ;
D_VIT_ZAGRADA 113 }
KR_INT 124 int
IDN 124 main2
L_ZAGRADA 124 (
KR_VOID 124 void
D_ZAGRADA 124 )
L_VIT_ZAGRADA 124 {
KR_INT 125 int
IDN 125 x
OP_PRIDRUZI 125 =
BROJ 125 2147483647
ZAREZ 125 ,
IDN 125 y
TOCKAZAREZ 125 ;
L_ZAGRADA 127 (
KR_INT 127 int
D_ZAGRADA 127 )
ZNAK 127 'a'
TOCKAZAREZ 127 ;
L_ZAGRADA 128 (
KR_CONST 128 const
KR_CHAR 128 char
D_ZAGRADA 128 )
IDN 128 x
TOCKAZAREZ 128 ;
L_ZAGRADA 129 (
KR_CONST 129 const
KR_INT 129 int
D_ZAGRADA 129 )
ZNAK 129 'a'
TOCKAZAREZ 129 ;
L_ZAGRADA 130 (
KR_CHAR 130 char
D_ZAGRADA 130 )
L_ZAGRADA 130 (
L_ZAGRADA 130 (
KR_CONST 130 const
KR_INT 130 int
D_ZAGRADA 130 )
BROJ 130 300
PLUS 130 +
L_ZAGRADA 130 (
KR_INT 130 int
D_ZAGRADA 130 )
ZNAK 130 'a'
D_ZAGRADA 130 )
TOCKAZAREZ 130 ;
L_ZAGRADA 131 (
KR_INT 131 int
D_ZAGRADA 131 )
L_ZAGRADA 131 (
KR_CHAR 131 char
D_ZAGRADA 131 )
L_ZAGRADA 131 (
KR_CONST 131 const
KR_INT 131 int
D_ZAGRADA 131 )
L_ZAGRADA 131 (
KR_CONST 131 const
KR_CHAR 131 char
D_ZAGRADA 131 )
L_ZAGRADA 131 (
IDN 131 x
PLUS 131 +
IDN 131 y
D_ZAGRADA 131 )
TOCKAZAREZ 131 ;
KR_RETURN 133 return
BROJ 133 0
TOCKAZAREZ 133 ;
D_VIT_ZAGRADA 134 }
