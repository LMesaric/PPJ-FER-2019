KR_VOID 1 void
IDN 1 foo
L_ZAGRADA 1 (
KR_INT 1 int
IDN 1 x
ZAREZ 1 ,
KR_INT 1 int
IDN 1 c
ZAREZ 1 ,
KR_CHAR 1 char
IDN 1 h
D_ZAGRADA 1 )
TOCKAZAREZ 1 ;
KR_INT 3 int
IDN 3 f
L_ZAGRADA 3 (
KR_VOID 3 void
D_ZAGRADA 3 )
L_VIT_ZAGRADA 3 {
KR_RETURN 4 return
BROJ 4 0
TOCKAZAREZ 4 ;
D_VIT_ZAGRADA 5 }
KR_INT 7 int
IDN 7 x
OP_PRIDRUZI 7 =
BROJ 7 3
TOCKAZAREZ 7 ;
KR_INT 11 int
IDN 11 main
L_ZAGRADA 11 (
KR_VOID 11 void
D_ZAGRADA 11 )
L_VIT_ZAGRADA 11 {
KR_INT 12 int
IDN 12 a
OP_PRIDRUZI 12 =
BROJ 12 5
TOCKAZAREZ 12 ;
KR_CONST 13 const
KR_CHAR 13 char
IDN 13 c
OP_PRIDRUZI 13 =
ZNAK 13 'i'
TOCKAZAREZ 13 ;
KR_INT 14 int
IDN 14 niz
L_UGL_ZAGRADA 14 [
BROJ 14 3
D_UGL_ZAGRADA 14 ]
TOCKAZAREZ 14 ;
KR_VOID 15 void
IDN 15 foo
L_ZAGRADA 15 (
KR_INT 15 int
IDN 15 x
ZAREZ 15 ,
KR_INT 15 int
IDN 15 c
ZAREZ 15 ,
KR_CHAR 15 char
IDN 15 h
D_ZAGRADA 15 )
TOCKAZAREZ 15 ;
KR_INT 16 int
IDN 16 x
OP_PRIDRUZI 16 =
BROJ 16 5
TOCKAZAREZ 16 ;
KR_INT 17 int
IDN 17 y
OP_PRIDRUZI 17 =
IDN 17 x
PLUS 17 +
BROJ 17 1
TOCKAZAREZ 17 ;
IDN 18 a
OP_PRIDRUZI 18 =
IDN 18 a
PLUS 18 +
BROJ 18 3
TOCKAZAREZ 18 ;
KR_IF 20 if
L_ZAGRADA 20 (
IDN 20 a
OP_GT 20 >
BROJ 20 2
D_ZAGRADA 20 )
L_VIT_ZAGRADA 21 {
KR_INT 22 int
IDN 22 a
TOCKAZAREZ 22 ;
KR_INT 23 int
IDN 23 b
TOCKAZAREZ 23 ;
IDN 24 a
OP_PRIDRUZI 24 =
IDN 24 b
TOCKAZAREZ 24 ;
IDN 25 x
OP_PRIDRUZI 25 =
BROJ 25 4
TOCKAZAREZ 25 ;
D_VIT_ZAGRADA 26 }
KR_RETURN 27 return
IDN 27 f
L_ZAGRADA 27 (
D_ZAGRADA 27 )
TOCKAZAREZ 27 ;
D_VIT_ZAGRADA 28 }
KR_INT 30 int
IDN 30 fact
L_ZAGRADA 30 (
KR_INT 30 int
IDN 30 bzvz
D_ZAGRADA 30 )
TOCKAZAREZ 30 ;
KR_VOID 32 void
IDN 32 foo
L_ZAGRADA 32 (
KR_INT 32 int
IDN 32 x
ZAREZ 32 ,
KR_INT 32 int
IDN 32 c
ZAREZ 32 ,
KR_CHAR 32 char
IDN 32 h
D_ZAGRADA 32 )
L_VIT_ZAGRADA 32 {
KR_INT 33 int
IDN 33 i
OP_PRIDRUZI 33 =
IDN 33 fact
L_ZAGRADA 33 (
IDN 33 x
D_ZAGRADA 33 )
TOCKAZAREZ 33 ;
KR_INT 34 int
IDN 34 a
OP_PRIDRUZI 34 =
IDN 34 a
PLUS 34 +
BROJ 34 1
TOCKAZAREZ 34 ;
KR_VOID 35 void
IDN 35 foo3
L_ZAGRADA 35 (
KR_VOID 35 void
D_ZAGRADA 35 )
TOCKAZAREZ 35 ;
KR_INT 36 int
IDN 36 niz1
L_UGL_ZAGRADA 36 [
BROJ 36 5
D_UGL_ZAGRADA 36 ]
OP_PRIDRUZI 36 =
L_VIT_ZAGRADA 36 {
BROJ 36 1
ZAREZ 36 ,
BROJ 36 2
ZAREZ 36 ,
BROJ 36 3
D_VIT_ZAGRADA 36 }
TOCKAZAREZ 36 ;
KR_FOR 39 for
L_ZAGRADA 39 (
IDN 39 i
OP_PRIDRUZI 39 =
BROJ 39 0
TOCKAZAREZ 39 ;
IDN 39 i
OP_LT 39 <
BROJ 39 5
TOCKAZAREZ 39 ;
IDN 39 i
OP_INC 39 ++
D_ZAGRADA 39 )
KR_BREAK 40 break
TOCKAZAREZ 40 ;
KR_WHILE 42 while
L_ZAGRADA 42 (
BROJ 42 1
D_ZAGRADA 42 )
L_VIT_ZAGRADA 43 {
KR_BREAK 44 break
TOCKAZAREZ 44 ;
IDN 45 i
OP_PRIDRUZI 45 =
IDN 45 i
PLUS 45 +
BROJ 45 2
TOCKAZAREZ 45 ;
D_VIT_ZAGRADA 46 }
KR_RETURN 48 return
TOCKAZAREZ 48 ;
KR_BREAK 49 break
TOCKAZAREZ 49 ;
D_VIT_ZAGRADA 50 }
KR_CHAR 52 char
IDN 52 proba3
L_ZAGRADA 52 (
KR_VOID 52 void
D_ZAGRADA 52 )
L_VIT_ZAGRADA 52 {
IDN 53 x
OP_PRIDRUZI 53 =
BROJ 53 4
TOCKAZAREZ 53 ;
KR_IF 54 if
L_ZAGRADA 54 (
BROJ 54 0
D_ZAGRADA 54 )
L_VIT_ZAGRADA 55 {
IDN 56 x
OP_PRIDRUZI 56 =
BROJ 56 6
TOCKAZAREZ 56 ;
KR_RETURN 57 return
ZNAK 57 'a'
TOCKAZAREZ 57 ;
D_VIT_ZAGRADA 58 }
KR_ELSE 58 else
L_VIT_ZAGRADA 58 {
KR_RETURN 59 return
L_ZAGRADA 59 (
KR_CHAR 59 char
D_ZAGRADA 59 )
BROJ 59 97
TOCKAZAREZ 59 ;
D_VIT_ZAGRADA 61 }
D_VIT_ZAGRADA 62 }
KR_CHAR 64 char
IDN 64 proba
L_ZAGRADA 64 (
KR_VOID 64 void
D_ZAGRADA 64 )
L_VIT_ZAGRADA 64 {
KR_RETURN 65 return
L_ZAGRADA 65 (
KR_CHAR 65 char
D_ZAGRADA 65 )
BROJ 65 97
TOCKAZAREZ 65 ;
D_VIT_ZAGRADA 66 }
KR_INT 69 int
IDN 69 proba2
L_ZAGRADA 69 (
KR_VOID 69 void
D_ZAGRADA 69 )
L_VIT_ZAGRADA 69 {
KR_RETURN 71 return
ZNAK 71 'a'
TOCKAZAREZ 71 ;
D_VIT_ZAGRADA 72 }
KR_INT 74 int
IDN 74 fact
L_ZAGRADA 74 (
KR_INT 74 int
IDN 74 n
D_ZAGRADA 74 )
L_VIT_ZAGRADA 74 {
IDN 75 foo
L_ZAGRADA 75 (
BROJ 75 1
ZAREZ 75 ,
BROJ 75 2
ZAREZ 75 ,
ZNAK 75 'h'
D_ZAGRADA 75 )
TOCKAZAREZ 75 ;
KR_IF 76 if
L_ZAGRADA 76 (
IDN 76 n
OP_GT 76 >
BROJ 76 0
D_ZAGRADA 76 )
KR_RETURN 77 return
IDN 77 n
OP_PUTA 77 *
IDN 77 fact
L_ZAGRADA 77 (
IDN 77 n
MINUS 77 -
BROJ 77 1
D_ZAGRADA 77 )
TOCKAZAREZ 77 ;
KR_ELSE 78 else
KR_RETURN 79 return
BROJ 79 1
TOCKAZAREZ 79 ;
D_VIT_ZAGRADA 80 }
KR_VOID 82 void
IDN 82 foo3
L_ZAGRADA 82 (
KR_VOID 82 void
D_ZAGRADA 82 )
L_VIT_ZAGRADA 82 {
KR_INT 83 int
IDN 83 i
OP_PRIDRUZI 83 =
BROJ 83 8
TOCKAZAREZ 83 ;
KR_RETURN 85 return
TOCKAZAREZ 85 ;
D_VIT_ZAGRADA 86 }
KR_VOID 88 void
IDN 88 f2
L_ZAGRADA 88 (
KR_INT 88 int
IDN 88 x
ZAREZ 88 ,
KR_INT 88 int
IDN 88 a
L_UGL_ZAGRADA 88 [
D_UGL_ZAGRADA 88 ]
D_ZAGRADA 88 )
L_VIT_ZAGRADA 88 {
IDN 89 x
OP_PRIDRUZI 89 =
IDN 89 x
PLUS 89 +
BROJ 89 1
TOCKAZAREZ 89 ;
IDN 90 a
L_UGL_ZAGRADA 90 [
BROJ 90 0
D_UGL_ZAGRADA 90 ]
OP_PRIDRUZI 90 =
IDN 90 a
L_UGL_ZAGRADA 90 [
BROJ 90 0
D_UGL_ZAGRADA 90 ]
PLUS 90 +
BROJ 90 1
TOCKAZAREZ 90 ;
D_VIT_ZAGRADA 91 }
KR_INT 102 int
IDN 102 main2
L_ZAGRADA 102 (
KR_VOID 102 void
D_ZAGRADA 102 )
L_VIT_ZAGRADA 102 {
KR_INT 103 int
IDN 103 x
OP_PRIDRUZI 103 =
BROJ 103 2147483647
ZAREZ 103 ,
IDN 103 y
TOCKAZAREZ 103 ;
L_ZAGRADA 105 (
KR_INT 105 int
D_ZAGRADA 105 )
ZNAK 105 'a'
TOCKAZAREZ 105 ;
L_ZAGRADA 106 (
KR_CONST 106 const
KR_CHAR 106 char
D_ZAGRADA 106 )
IDN 106 x
TOCKAZAREZ 106 ;
L_ZAGRADA 107 (
KR_CONST 107 const
KR_INT 107 int
D_ZAGRADA 107 )
ZNAK 107 'a'
TOCKAZAREZ 107 ;
L_ZAGRADA 108 (
KR_CHAR 108 char
D_ZAGRADA 108 )
L_ZAGRADA 108 (
L_ZAGRADA 108 (
KR_CONST 108 const
KR_INT 108 int
D_ZAGRADA 108 )
BROJ 108 300
PLUS 108 +
L_ZAGRADA 108 (
KR_INT 108 int
D_ZAGRADA 108 )
ZNAK 108 'a'
D_ZAGRADA 108 )
TOCKAZAREZ 108 ;
L_ZAGRADA 109 (
KR_INT 109 int
D_ZAGRADA 109 )
L_ZAGRADA 109 (
KR_CHAR 109 char
D_ZAGRADA 109 )
L_ZAGRADA 109 (
KR_CONST 109 const
KR_INT 109 int
D_ZAGRADA 109 )
L_ZAGRADA 109 (
KR_CONST 109 const
KR_CHAR 109 char
D_ZAGRADA 109 )
L_ZAGRADA 109 (
IDN 109 x
PLUS 109 +
IDN 109 y
D_ZAGRADA 109 )
TOCKAZAREZ 109 ;
KR_RETURN 111 return
BROJ 111 0
TOCKAZAREZ 111 ;
D_VIT_ZAGRADA 112 }
