KR_VOID 14 void
IDN 14 foo
L_ZAGRADA 14 (
KR_INT 14 int
IDN 14 x
ZAREZ 14 ,
KR_INT 14 int
IDN 14 c
ZAREZ 14 ,
KR_CHAR 14 char
IDN 14 h
D_ZAGRADA 14 )
TOCKAZAREZ 14 ;
KR_INT 16 int
IDN 16 f
L_ZAGRADA 16 (
KR_VOID 16 void
D_ZAGRADA 16 )
L_VIT_ZAGRADA 17 {
KR_RETURN 18 return
BROJ 18 0
TOCKAZAREZ 18 ;
D_VIT_ZAGRADA 19 }
KR_INT 21 int
IDN 21 x
OP_PRIDRUZI 21 =
BROJ 21 3
TOCKAZAREZ 21 ;
KR_INT 23 int
IDN 23 deklaracijaBezDefinicije
L_ZAGRADA 23 (
KR_INT 23 int
IDN 23 x
D_ZAGRADA 23 )
TOCKAZAREZ 23 ;
KR_INT 25 int
IDN 25 main
L_ZAGRADA 25 (
KR_VOID 25 void
D_ZAGRADA 25 )
L_VIT_ZAGRADA 26 {
KR_INT 27 int
IDN 27 a
OP_PRIDRUZI 27 =
BROJ 27 5
TOCKAZAREZ 27 ;
KR_CONST 28 const
KR_CHAR 28 char
IDN 28 c
OP_PRIDRUZI 28 =
ZNAK 28 'i'
TOCKAZAREZ 28 ;
KR_INT 29 int
IDN 29 niz
L_UGL_ZAGRADA 29 [
BROJ 29 3
D_UGL_ZAGRADA 29 ]
TOCKAZAREZ 29 ;
KR_VOID 30 void
IDN 30 foo
L_ZAGRADA 30 (
KR_INT 30 int
IDN 30 x
ZAREZ 30 ,
KR_INT 30 int
IDN 30 c
ZAREZ 30 ,
KR_CHAR 30 char
IDN 30 h
D_ZAGRADA 30 )
TOCKAZAREZ 30 ;
KR_INT 31 int
IDN 31 x
OP_PRIDRUZI 31 =
BROJ 31 5
TOCKAZAREZ 31 ;
KR_INT 32 int
IDN 32 y
OP_PRIDRUZI 32 =
IDN 32 x
PLUS 32 +
BROJ 32 1
TOCKAZAREZ 32 ;
IDN 33 a
OP_PRIDRUZI 33 =
IDN 33 a
PLUS 33 +
BROJ 33 3
TOCKAZAREZ 33 ;
KR_IF 35 if
L_ZAGRADA 35 (
IDN 35 a
OP_GT 35 >
BROJ 35 2
D_ZAGRADA 35 )
L_VIT_ZAGRADA 36 {
KR_INT 37 int
IDN 37 a
TOCKAZAREZ 37 ;
KR_INT 38 int
IDN 38 b
TOCKAZAREZ 38 ;
IDN 39 a
OP_PRIDRUZI 39 =
IDN 39 b
TOCKAZAREZ 39 ;
IDN 40 x
OP_PRIDRUZI 40 =
BROJ 40 4
TOCKAZAREZ 40 ;
D_VIT_ZAGRADA 41 }
KR_RETURN 42 return
IDN 42 f
L_ZAGRADA 42 (
D_ZAGRADA 42 )
TOCKAZAREZ 42 ;
D_VIT_ZAGRADA 43 }
KR_INT 45 int
IDN 45 fact
L_ZAGRADA 45 (
KR_INT 45 int
IDN 45 bzvz
D_ZAGRADA 45 )
TOCKAZAREZ 45 ;
KR_VOID 47 void
IDN 47 foo
L_ZAGRADA 47 (
KR_INT 47 int
IDN 47 x
ZAREZ 47 ,
KR_INT 47 int
IDN 47 c
ZAREZ 47 ,
KR_CHAR 47 char
IDN 47 h
D_ZAGRADA 47 )
L_VIT_ZAGRADA 48 {
KR_INT 49 int
IDN 49 i
OP_PRIDRUZI 49 =
IDN 49 fact
L_ZAGRADA 49 (
IDN 49 x
D_ZAGRADA 49 )
TOCKAZAREZ 49 ;
KR_INT 50 int
IDN 50 a
OP_PRIDRUZI 50 =
IDN 50 a
PLUS 50 +
BROJ 50 1
TOCKAZAREZ 50 ;
KR_VOID 51 void
IDN 51 foo3
L_ZAGRADA 51 (
KR_VOID 51 void
D_ZAGRADA 51 )
TOCKAZAREZ 51 ;
KR_INT 52 int
IDN 52 niz1
L_UGL_ZAGRADA 52 [
BROJ 52 5
D_UGL_ZAGRADA 52 ]
OP_PRIDRUZI 52 =
L_VIT_ZAGRADA 52 {
BROJ 52 1
ZAREZ 52 ,
BROJ 52 2
ZAREZ 52 ,
BROJ 52 3
D_VIT_ZAGRADA 52 }
TOCKAZAREZ 52 ;
KR_FOR 55 for
L_ZAGRADA 55 (
IDN 55 i
OP_PRIDRUZI 55 =
BROJ 55 0
TOCKAZAREZ 55 ;
IDN 55 i
OP_LT 55 <
BROJ 55 5
TOCKAZAREZ 55 ;
IDN 55 i
OP_INC 55 ++
D_ZAGRADA 55 )
KR_BREAK 56 break
TOCKAZAREZ 56 ;
KR_WHILE 57 while
L_ZAGRADA 57 (
BROJ 57 1
D_ZAGRADA 57 )
L_VIT_ZAGRADA 58 {
KR_BREAK 59 break
TOCKAZAREZ 59 ;
IDN 60 i
OP_PRIDRUZI 60 =
IDN 60 i
PLUS 60 +
BROJ 60 2
TOCKAZAREZ 60 ;
D_VIT_ZAGRADA 61 }
KR_RETURN 63 return
TOCKAZAREZ 63 ;
D_VIT_ZAGRADA 65 }
KR_CHAR 67 char
IDN 67 proba3
L_ZAGRADA 67 (
KR_VOID 67 void
D_ZAGRADA 67 )
L_VIT_ZAGRADA 68 {
IDN 69 x
OP_PRIDRUZI 69 =
BROJ 69 4
TOCKAZAREZ 69 ;
KR_IF 70 if
L_ZAGRADA 70 (
BROJ 70 0
D_ZAGRADA 70 )
L_VIT_ZAGRADA 71 {
IDN 72 x
OP_PRIDRUZI 72 =
BROJ 72 6
TOCKAZAREZ 72 ;
KR_RETURN 73 return
ZNAK 73 'a'
TOCKAZAREZ 73 ;
D_VIT_ZAGRADA 74 }
KR_ELSE 74 else
L_VIT_ZAGRADA 74 {
KR_RETURN 75 return
L_ZAGRADA 75 (
KR_CHAR 75 char
D_ZAGRADA 75 )
BROJ 75 97
TOCKAZAREZ 75 ;
D_VIT_ZAGRADA 77 }
D_VIT_ZAGRADA 78 }
KR_CHAR 80 char
IDN 80 proba
L_ZAGRADA 80 (
KR_VOID 80 void
D_ZAGRADA 80 )
L_VIT_ZAGRADA 81 {
KR_RETURN 82 return
L_ZAGRADA 82 (
KR_CHAR 82 char
D_ZAGRADA 82 )
BROJ 82 97
TOCKAZAREZ 82 ;
D_VIT_ZAGRADA 83 }
KR_INT 86 int
IDN 86 proba2
L_ZAGRADA 86 (
KR_VOID 86 void
D_ZAGRADA 86 )
L_VIT_ZAGRADA 87 {
KR_RETURN 89 return
ZNAK 89 'a'
TOCKAZAREZ 89 ;
D_VIT_ZAGRADA 90 }
KR_INT 92 int
IDN 92 fact
L_ZAGRADA 92 (
KR_INT 92 int
IDN 92 n
D_ZAGRADA 92 )
L_VIT_ZAGRADA 93 {
IDN 94 foo
L_ZAGRADA 94 (
BROJ 94 1
ZAREZ 94 ,
BROJ 94 2
ZAREZ 94 ,
ZNAK 94 'h'
D_ZAGRADA 94 )
TOCKAZAREZ 94 ;
KR_IF 95 if
L_ZAGRADA 95 (
IDN 95 n
OP_GT 95 >
BROJ 95 0
D_ZAGRADA 95 )
KR_RETURN 96 return
IDN 96 n
OP_PUTA 96 *
IDN 96 fact
L_ZAGRADA 96 (
IDN 96 n
MINUS 96 -
BROJ 96 1
D_ZAGRADA 96 )
TOCKAZAREZ 96 ;
KR_ELSE 97 else
KR_RETURN 98 return
BROJ 98 1
TOCKAZAREZ 98 ;
D_VIT_ZAGRADA 99 }
KR_VOID 101 void
IDN 101 foo3
L_ZAGRADA 101 (
KR_VOID 101 void
D_ZAGRADA 101 )
L_VIT_ZAGRADA 102 {
KR_INT 103 int
IDN 103 i
OP_PRIDRUZI 103 =
BROJ 103 8
TOCKAZAREZ 103 ;
KR_RETURN 105 return
TOCKAZAREZ 105 ;
D_VIT_ZAGRADA 106 }
KR_VOID 108 void
IDN 108 f2
L_ZAGRADA 108 (
KR_INT 108 int
IDN 108 x
ZAREZ 108 ,
KR_INT 108 int
IDN 108 a
L_UGL_ZAGRADA 108 [
D_UGL_ZAGRADA 108 ]
D_ZAGRADA 108 )
L_VIT_ZAGRADA 108 {
IDN 109 x
OP_PRIDRUZI 109 =
IDN 109 x
PLUS 109 +
BROJ 109 1
TOCKAZAREZ 109 ;
IDN 110 a
L_UGL_ZAGRADA 110 [
BROJ 110 0
D_UGL_ZAGRADA 110 ]
OP_PRIDRUZI 110 =
IDN 110 a
L_UGL_ZAGRADA 110 [
BROJ 110 0
D_UGL_ZAGRADA 110 ]
PLUS 110 +
BROJ 110 1
TOCKAZAREZ 110 ;
D_VIT_ZAGRADA 111 }
KR_INT 122 int
IDN 122 main2
L_ZAGRADA 122 (
KR_VOID 122 void
D_ZAGRADA 122 )
L_VIT_ZAGRADA 122 {
KR_INT 123 int
IDN 123 x
OP_PRIDRUZI 123 =
BROJ 123 2147483647
ZAREZ 123 ,
IDN 123 y
TOCKAZAREZ 123 ;
L_ZAGRADA 125 (
KR_INT 125 int
D_ZAGRADA 125 )
ZNAK 125 'a'
TOCKAZAREZ 125 ;
L_ZAGRADA 126 (
KR_CONST 126 const
KR_CHAR 126 char
D_ZAGRADA 126 )
IDN 126 x
TOCKAZAREZ 126 ;
L_ZAGRADA 127 (
KR_CONST 127 const
KR_INT 127 int
D_ZAGRADA 127 )
ZNAK 127 'a'
TOCKAZAREZ 127 ;
L_ZAGRADA 128 (
KR_CHAR 128 char
D_ZAGRADA 128 )
L_ZAGRADA 128 (
L_ZAGRADA 128 (
KR_CONST 128 const
KR_INT 128 int
D_ZAGRADA 128 )
BROJ 128 300
PLUS 128 +
L_ZAGRADA 128 (
KR_INT 128 int
D_ZAGRADA 128 )
ZNAK 128 'a'
D_ZAGRADA 128 )
TOCKAZAREZ 128 ;
L_ZAGRADA 129 (
KR_INT 129 int
D_ZAGRADA 129 )
L_ZAGRADA 129 (
KR_CHAR 129 char
D_ZAGRADA 129 )
L_ZAGRADA 129 (
KR_CONST 129 const
KR_INT 129 int
D_ZAGRADA 129 )
L_ZAGRADA 129 (
KR_CONST 129 const
KR_CHAR 129 char
D_ZAGRADA 129 )
L_ZAGRADA 129 (
IDN 129 x
PLUS 129 +
IDN 129 y
D_ZAGRADA 129 )
TOCKAZAREZ 129 ;
KR_RETURN 131 return
BROJ 131 0
TOCKAZAREZ 131 ;
D_VIT_ZAGRADA 132 }
