IDN 1 include
OP_LT 1 <
IDN 1 algorithm
OP_GT 1 >
IDN 2 include
OP_LT 2 <
IDN 2 cassert
OP_GT 2 >
IDN 3 include
OP_LT 3 <
IDN 3 cstdio
OP_GT 3 >
IDN 4 include
OP_LT 4 <
IDN 4 iostream
OP_GT 4 >
IDN 5 include
OP_LT 5 <
IDN 5 sstream
OP_GT 5 >
IDN 6 include
OP_LT 6 <
IDN 6 string
OP_GT 6 >
IDN 7 include
OP_LT 7 <
IDN 7 vector
OP_GT 7 >
IDN 8 include
OP_LT 8 <
IDN 8 cstring
OP_GT 8 >
IDN 9 include
OP_LT 9 <
IDN 9 utility
OP_GT 9 >
IDN 10 include
OP_LT 10 <
IDN 10 set
OP_GT 10 >
IDN 12 using
IDN 12 namespace
IDN 12 std
TOCKAZAREZ 12 ;
KR_STRUCT 14 struct
IDN 14 Block
L_VIT_ZAGRADA 14 {
KR_INT 15 int
IDN 15 sz
TOCKAZAREZ 15 ;
IDN 16 vector
OP_LT 16 <
IDN 16 pair
OP_LT 16 <
KR_INT 16 int
ZAREZ 16 ,
KR_INT 16 int
OP_GT 16 >
OP_GT 16 >
IDN 16 hor
TOCKAZAREZ 16 ;
IDN 17 vector
OP_LT 17 <
IDN 17 pair
OP_LT 17 <
KR_INT 17 int
ZAREZ 17 ,
KR_INT 17 int
OP_GT 17 >
OP_GT 17 >
IDN 17 ver
TOCKAZAREZ 17 ;
IDN 18 Block
L_ZAGRADA 18 (
KR_INT 18 int
IDN 18 sz_
ZAREZ 18 ,
KR_CONST 18 const
IDN 18 vector
OP_LT 18 <
IDN 18 pair
OP_LT 18 <
KR_INT 18 int
ZAREZ 18 ,
KR_INT 18 int
OP_GT 18 >
OP_GT 18 >
AMPERSAND 18 &
IDN 18 h
ZAREZ 18 ,
KR_CONST 18 const
IDN 18 vector
OP_LT 18 <
IDN 18 pair
OP_LT 18 <
KR_INT 18 int
ZAREZ 18 ,
KR_INT 18 int
OP_GT 18 >
OP_GT 18 >
AMPERSAND 18 &
IDN 18 v
D_ZAGRADA 18 )
IDN 18 sz
L_ZAGRADA 18 (
IDN 18 sz_
D_ZAGRADA 18 )
ZAREZ 18 ,
IDN 18 hor
L_ZAGRADA 18 (
IDN 18 h
D_ZAGRADA 18 )
ZAREZ 18 ,
IDN 18 ver
L_ZAGRADA 18 (
IDN 18 v
D_ZAGRADA 18 )
L_VIT_ZAGRADA 18 {
D_VIT_ZAGRADA 18 }
D_VIT_ZAGRADA 19 }
TOCKAZAREZ 19 ;
IDN 20 bool
IDN 20 operator
OP_LT 20 <
L_ZAGRADA 20 (
KR_CONST 20 const
IDN 20 Block
AMPERSAND 20 &
IDN 20 a
ZAREZ 20 ,
KR_CONST 20 const
IDN 20 Block
AMPERSAND 20 &
IDN 20 b
D_ZAGRADA 20 )
L_VIT_ZAGRADA 20 {
KR_IF 21 if
L_ZAGRADA 21 (
IDN 21 a
TOCKA 21 .
IDN 21 sz
OP_NEQ 21 !=
IDN 21 b
TOCKA 21 .
IDN 21 sz
D_ZAGRADA 21 )
L_VIT_ZAGRADA 21 {
KR_RETURN 22 return
IDN 22 a
TOCKA 22 .
IDN 22 sz
OP_LT 22 <
IDN 22 b
TOCKA 22 .
IDN 22 sz
TOCKAZAREZ 22 ;
D_VIT_ZAGRADA 23 }
KR_IF 24 if
L_ZAGRADA 24 (
IDN 24 a
TOCKA 24 .
IDN 24 hor
OP_NEQ 24 !=
IDN 24 b
TOCKA 24 .
IDN 24 hor
D_ZAGRADA 24 )
L_VIT_ZAGRADA 24 {
KR_RETURN 25 return
IDN 25 a
TOCKA 25 .
IDN 25 hor
OP_LT 25 <
IDN 25 b
TOCKA 25 .
IDN 25 hor
TOCKAZAREZ 25 ;
D_VIT_ZAGRADA 26 }
KR_RETURN 27 return
IDN 27 a
TOCKA 27 .
IDN 27 ver
OP_LT 27 <
IDN 27 b
TOCKA 27 .
IDN 27 ver
TOCKAZAREZ 27 ;
D_VIT_ZAGRADA 28 }
KR_INT 30 int
IDN 30 C
L_UGL_ZAGRADA 30 [
BROJ 30 50
D_UGL_ZAGRADA 30 ]
L_UGL_ZAGRADA 30 [
BROJ 30 50
D_UGL_ZAGRADA 30 ]
TOCKAZAREZ 30 ;
IDN 31 vector
OP_LT 31 <
IDN 31 string
OP_GT 31 >
IDN 31 A
TOCKAZAREZ 31 ;
KR_INT 32 int
IDN 32 M
ZAREZ 32 ,
IDN 32 N
TOCKAZAREZ 32 ;
IDN 33 set
OP_LT 33 <
IDN 33 Block
OP_GT 33 >
IDN 33 S
TOCKAZAREZ 33 ;
IDN 35 inline
IDN 35 bool
IDN 35 valid
L_ZAGRADA 35 (
KR_INT 35 int
IDN 35 i
ZAREZ 35 ,
KR_INT 35 int
IDN 35 j
D_ZAGRADA 35 )
L_VIT_ZAGRADA 35 {
KR_IF 36 if
L_ZAGRADA 36 (
IDN 36 i
OP_LT 36 <
BROJ 36 0
OP_ILI 36 ||
IDN 36 j
OP_LT 36 <
BROJ 36 0
OP_ILI 36 ||
IDN 36 i
OP_GTE 36 >=
IDN 36 M
OP_ILI 36 ||
IDN 36 j
OP_GTE 36 >=
IDN 36 N
D_ZAGRADA 36 )
L_VIT_ZAGRADA 36 {
KR_RETURN 37 return
IDN 37 false
TOCKAZAREZ 37 ;
D_VIT_ZAGRADA 38 }
KR_RETURN 39 return
IDN 39 true
TOCKAZAREZ 39 ;
D_VIT_ZAGRADA 40 }
KR_INT 41 int
IDN 41 di
L_UGL_ZAGRADA 41 [
D_UGL_ZAGRADA 41 ]
OP_PRIDRUZI 41 =
L_VIT_ZAGRADA 41 {
MINUS 41 -
BROJ 41 1
ZAREZ 41 ,
BROJ 41 0
ZAREZ 41 ,
BROJ 41 1
ZAREZ 41 ,
BROJ 41 0
D_VIT_ZAGRADA 41 }
TOCKAZAREZ 41 ;
KR_INT 42 int
IDN 42 dj
L_UGL_ZAGRADA 42 [
D_UGL_ZAGRADA 42 ]
OP_PRIDRUZI 42 =
L_VIT_ZAGRADA 42 {
BROJ 42 0
ZAREZ 42 ,
BROJ 42 1
ZAREZ 42 ,
BROJ 42 0
ZAREZ 42 ,
MINUS 42 -
BROJ 42 1
D_VIT_ZAGRADA 42 }
TOCKAZAREZ 42 ;
KR_INT 43 int
IDN 43 dfs
L_ZAGRADA 43 (
KR_INT 43 int
IDN 43 i
ZAREZ 43 ,
KR_INT 43 int
IDN 43 j
ZAREZ 43 ,
KR_INT 43 int
IDN 43 comp
ZAREZ 43 ,
IDN 43 vector
OP_LT 43 <
IDN 43 pair
OP_LT 43 <
KR_INT 43 int
ZAREZ 43 ,
KR_INT 43 int
OP_GT 43 >
OP_GT 43 >
AMPERSAND 43 &
IDN 43 h
ZAREZ 43 ,
IDN 43 vector
OP_LT 43 <
IDN 43 pair
OP_LT 43 <
KR_INT 43 int
ZAREZ 43 ,
KR_INT 43 int
OP_GT 43 >
OP_GT 43 >
AMPERSAND 43 &
IDN 43 v
D_ZAGRADA 43 )
L_VIT_ZAGRADA 43 {
IDN 44 C
L_UGL_ZAGRADA 44 [
IDN 44 i
D_UGL_ZAGRADA 44 ]
L_UGL_ZAGRADA 44 [
IDN 44 j
D_UGL_ZAGRADA 44 ]
OP_PRIDRUZI 44 =
IDN 44 comp
TOCKAZAREZ 44 ;
KR_INT 45 int
IDN 45 ret
OP_PRIDRUZI 45 =
BROJ 45 0
TOCKAZAREZ 45 ;
IDN 46 h
L_UGL_ZAGRADA 46 [
IDN 46 i
D_UGL_ZAGRADA 46 ]
TOCKA 46 .
IDN 46 first
OP_PRIDRUZI 46 =
IDN 46 min
L_ZAGRADA 46 (
IDN 46 h
L_UGL_ZAGRADA 46 [
IDN 46 i
D_UGL_ZAGRADA 46 ]
TOCKA 46 .
IDN 46 first
ZAREZ 46 ,
IDN 46 j
D_ZAGRADA 46 )
TOCKAZAREZ 46 ;
IDN 47 h
L_UGL_ZAGRADA 47 [
IDN 47 i
D_UGL_ZAGRADA 47 ]
TOCKA 47 .
IDN 47 second
OP_PRIDRUZI 47 =
IDN 47 max
L_ZAGRADA 47 (
IDN 47 h
L_UGL_ZAGRADA 47 [
IDN 47 i
D_UGL_ZAGRADA 47 ]
TOCKA 47 .
IDN 47 second
ZAREZ 47 ,
IDN 47 j
D_ZAGRADA 47 )
TOCKAZAREZ 47 ;
IDN 48 v
L_UGL_ZAGRADA 48 [
IDN 48 j
D_UGL_ZAGRADA 48 ]
TOCKA 48 .
IDN 48 first
OP_PRIDRUZI 48 =
IDN 48 min
L_ZAGRADA 48 (
IDN 48 v
L_UGL_ZAGRADA 48 [
IDN 48 j
D_UGL_ZAGRADA 48 ]
TOCKA 48 .
IDN 48 first
ZAREZ 48 ,
IDN 48 i
D_ZAGRADA 48 )
TOCKAZAREZ 48 ;
IDN 49 v
L_UGL_ZAGRADA 49 [
IDN 49 j
D_UGL_ZAGRADA 49 ]
TOCKA 49 .
IDN 49 second
OP_PRIDRUZI 49 =
IDN 49 max
L_ZAGRADA 49 (
IDN 49 v
L_UGL_ZAGRADA 49 [
IDN 49 j
D_UGL_ZAGRADA 49 ]
TOCKA 49 .
IDN 49 second
ZAREZ 49 ,
IDN 49 i
D_ZAGRADA 49 )
TOCKAZAREZ 49 ;
KR_FOR 51 for
L_ZAGRADA 51 (
KR_INT 51 int
IDN 51 d
OP_PRIDRUZI 51 =
BROJ 51 0
TOCKAZAREZ 51 ;
IDN 51 d
OP_LT 51 <
BROJ 51 4
TOCKAZAREZ 51 ;
OP_INC 51 ++
IDN 51 d
D_ZAGRADA 51 )
L_VIT_ZAGRADA 51 {
KR_INT 52 int
IDN 52 r
OP_PRIDRUZI 52 =
IDN 52 i
PLUS 52 +
IDN 52 di
L_UGL_ZAGRADA 52 [
IDN 52 d
D_UGL_ZAGRADA 52 ]
TOCKAZAREZ 52 ;
KR_INT 53 int
IDN 53 c
OP_PRIDRUZI 53 =
IDN 53 j
PLUS 53 +
IDN 53 dj
L_UGL_ZAGRADA 53 [
IDN 53 d
D_UGL_ZAGRADA 53 ]
TOCKAZAREZ 53 ;
KR_IF 54 if
L_ZAGRADA 54 (
IDN 54 valid
L_ZAGRADA 54 (
IDN 54 r
ZAREZ 54 ,
IDN 54 c
D_ZAGRADA 54 )
OP_I 54 &&
IDN 54 A
L_UGL_ZAGRADA 54 [
IDN 54 r
D_UGL_ZAGRADA 54 ]
L_UGL_ZAGRADA 54 [
IDN 54 c
D_UGL_ZAGRADA 54 ]
OP_EQ 54 ==
ZNAK 54 '#'
OP_I 54 &&
IDN 54 C
L_UGL_ZAGRADA 54 [
IDN 54 r
D_UGL_ZAGRADA 54 ]
L_UGL_ZAGRADA 54 [
IDN 54 c
D_UGL_ZAGRADA 54 ]
OP_EQ 54 ==
MINUS 54 -
BROJ 54 1
D_ZAGRADA 54 )
L_VIT_ZAGRADA 54 {
IDN 55 ret
PLUS 55 +
OP_PRIDRUZI 55 =
IDN 55 dfs
L_ZAGRADA 55 (
IDN 55 r
ZAREZ 55 ,
IDN 55 c
ZAREZ 55 ,
IDN 55 comp
ZAREZ 55 ,
IDN 55 h
ZAREZ 55 ,
IDN 55 v
D_ZAGRADA 55 )
TOCKAZAREZ 55 ;
D_VIT_ZAGRADA 56 }
D_VIT_ZAGRADA 57 }
KR_RETURN 59 return
IDN 59 ret
TOCKAZAREZ 59 ;
D_VIT_ZAGRADA 60 }
IDN 62 class
IDN 62 FixImage
L_VIT_ZAGRADA 62 {
IDN 63 public
IDN 64 vector
OP_LT 64 <
IDN 64 string
OP_GT 64 >
IDN 64 originalImage
L_ZAGRADA 64 (
IDN 64 vector
OP_LT 64 <
IDN 64 string
OP_GT 64 >
IDN 64 A_
D_ZAGRADA 64 )
L_VIT_ZAGRADA 64 {
IDN 65 A
OP_PRIDRUZI 65 =
IDN 65 A_
TOCKAZAREZ 65 ;
IDN 66 M
OP_PRIDRUZI 66 =
IDN 66 A
TOCKA 66 .
IDN 66 size
L_ZAGRADA 66 (
D_ZAGRADA 66 )
TOCKAZAREZ 66 ;
IDN 67 N
OP_PRIDRUZI 67 =
IDN 67 A
L_UGL_ZAGRADA 67 [
BROJ 67 0
D_UGL_ZAGRADA 67 ]
TOCKA 67 .
IDN 67 size
L_ZAGRADA 67 (
D_ZAGRADA 67 )
TOCKAZAREZ 67 ;
IDN 68 S
TOCKA 68 .
IDN 68 clear
L_ZAGRADA 68 (
D_ZAGRADA 68 )
TOCKAZAREZ 68 ;
KR_WHILE 70 while
L_ZAGRADA 70 (
BROJ 70 1
D_ZAGRADA 70 )
L_VIT_ZAGRADA 70 {
IDN 71 bool
IDN 71 change
OP_PRIDRUZI 71 =
IDN 71 false
TOCKAZAREZ 71 ;
IDN 72 memset
L_ZAGRADA 72 (
IDN 72 C
ZAREZ 72 ,
BROJ 72 0xff
ZAREZ 72 ,
IDN 72 sizeof
IDN 72 C
D_ZAGRADA 72 )
TOCKAZAREZ 72 ;
KR_INT 73 int
IDN 73 comp
OP_PRIDRUZI 73 =
BROJ 73 0
TOCKAZAREZ 73 ;
KR_FOR 74 for
L_ZAGRADA 74 (
KR_INT 74 int
IDN 74 i
OP_PRIDRUZI 74 =
BROJ 74 0
TOCKAZAREZ 74 ;
IDN 74 i
OP_LT 74 <
IDN 74 M
TOCKAZAREZ 74 ;
OP_INC 74 ++
IDN 74 i
D_ZAGRADA 74 )
L_VIT_ZAGRADA 74 {
KR_FOR 75 for
L_ZAGRADA 75 (
KR_INT 75 int
IDN 75 j
OP_PRIDRUZI 75 =
BROJ 75 0
TOCKAZAREZ 75 ;
IDN 75 j
OP_LT 75 <
IDN 75 N
TOCKAZAREZ 75 ;
OP_INC 75 ++
IDN 75 j
D_ZAGRADA 75 )
L_VIT_ZAGRADA 75 {
KR_IF 76 if
L_ZAGRADA 76 (
IDN 76 A
L_UGL_ZAGRADA 76 [
IDN 76 i
D_UGL_ZAGRADA 76 ]
L_UGL_ZAGRADA 76 [
IDN 76 j
D_UGL_ZAGRADA 76 ]
OP_EQ 76 ==
ZNAK 76 '#'
OP_I 76 &&
IDN 76 C
L_UGL_ZAGRADA 76 [
IDN 76 i
D_UGL_ZAGRADA 76 ]
L_UGL_ZAGRADA 76 [
IDN 76 j
D_UGL_ZAGRADA 76 ]
OP_EQ 76 ==
MINUS 76 -
BROJ 76 1
D_ZAGRADA 76 )
L_VIT_ZAGRADA 76 {
IDN 77 vector
OP_LT 77 <
IDN 77 pair
OP_LT 77 <
KR_INT 77 int
ZAREZ 77 ,
KR_INT 77 int
OP_GT 77 >
OP_GT 77 >
IDN 77 h
L_ZAGRADA 77 (
IDN 77 M
ZAREZ 77 ,
IDN 77 make_pair
L_ZAGRADA 77 (
BROJ 77 123
ZAREZ 77 ,
MINUS 77 -
BROJ 77 1
D_ZAGRADA 77 )
D_ZAGRADA 77 )
TOCKAZAREZ 77 ;
IDN 78 vector
OP_LT 78 <
IDN 78 pair
OP_LT 78 <
KR_INT 78 int
ZAREZ 78 ,
KR_INT 78 int
OP_GT 78 >
OP_GT 78 >
IDN 78 v
L_ZAGRADA 78 (
IDN 78 N
ZAREZ 78 ,
IDN 78 make_pair
L_ZAGRADA 78 (
BROJ 78 123
ZAREZ 78 ,
MINUS 78 -
BROJ 78 1
D_ZAGRADA 78 )
D_ZAGRADA 78 )
TOCKAZAREZ 78 ;
KR_INT 79 int
IDN 79 sz
OP_PRIDRUZI 79 =
IDN 79 dfs
L_ZAGRADA 79 (
IDN 79 i
ZAREZ 79 ,
IDN 79 j
ZAREZ 79 ,
IDN 79 comp
OP_INC 79 ++
ZAREZ 79 ,
IDN 79 h
ZAREZ 79 ,
IDN 79 v
D_ZAGRADA 79 )
TOCKAZAREZ 79 ;
IDN 80 Block
IDN 80 B
L_ZAGRADA 80 (
IDN 80 sz
ZAREZ 80 ,
IDN 80 h
ZAREZ 80 ,
IDN 80 v
D_ZAGRADA 80 )
TOCKAZAREZ 80 ;
KR_IF 81 if
L_ZAGRADA 81 (
IDN 81 S
TOCKA 81 .
IDN 81 count
L_ZAGRADA 81 (
IDN 81 B
D_ZAGRADA 81 )
D_ZAGRADA 81 )
L_VIT_ZAGRADA 81 {
KR_CONTINUE 82 continue
TOCKAZAREZ 82 ;
D_VIT_ZAGRADA 83 }
IDN 84 S
TOCKA 84 .
IDN 84 insert
L_ZAGRADA 84 (
IDN 84 B
D_ZAGRADA 84 )
TOCKAZAREZ 84 ;
KR_INT 85 int
IDN 85 d
OP_PRIDRUZI 85 =
BROJ 85 0
TOCKAZAREZ 85 ;
KR_FOR 86 for
L_ZAGRADA 86 (
KR_INT 86 int
IDN 86 r
OP_PRIDRUZI 86 =
BROJ 86 0
TOCKAZAREZ 86 ;
IDN 86 r
OP_LT 86 <
IDN 86 M
TOCKAZAREZ 86 ;
OP_INC 86 ++
IDN 86 r
D_ZAGRADA 86 )
L_VIT_ZAGRADA 86 {
KR_INT 87 int
IDN 87 a
OP_PRIDRUZI 87 =
IDN 87 h
L_UGL_ZAGRADA 87 [
IDN 87 r
D_UGL_ZAGRADA 87 ]
TOCKA 87 .
IDN 87 first
TOCKAZAREZ 87 ;
KR_INT 88 int
IDN 88 b
OP_PRIDRUZI 88 =
IDN 88 h
L_UGL_ZAGRADA 88 [
IDN 88 r
D_UGL_ZAGRADA 88 ]
TOCKA 88 .
IDN 88 second
TOCKAZAREZ 88 ;
KR_IF 89 if
L_ZAGRADA 89 (
IDN 89 a
OP_EQ 89 ==
BROJ 89 123
D_ZAGRADA 89 )
L_VIT_ZAGRADA 89 {
KR_CONTINUE 90 continue
TOCKAZAREZ 90 ;
D_VIT_ZAGRADA 91 }
KR_WHILE 92 while
L_ZAGRADA 92 (
OP_INC 92 ++
IDN 92 a
OP_LT 92 <
IDN 92 b
D_ZAGRADA 92 )
L_VIT_ZAGRADA 92 {
KR_IF 93 if
L_ZAGRADA 93 (
IDN 93 A
L_UGL_ZAGRADA 93 [
IDN 93 r
D_UGL_ZAGRADA 93 ]
L_UGL_ZAGRADA 93 [
IDN 93 a
D_UGL_ZAGRADA 93 ]
OP_NEQ 93 !=
ZNAK 93 '#'
D_ZAGRADA 93 )
L_VIT_ZAGRADA 93 {
OP_INC 94 ++
IDN 94 d
TOCKAZAREZ 94 ;
IDN 95 A
L_UGL_ZAGRADA 95 [
IDN 95 r
D_UGL_ZAGRADA 95 ]
L_UGL_ZAGRADA 95 [
IDN 95 a
D_UGL_ZAGRADA 95 ]
OP_PRIDRUZI 95 =
ZNAK 95 '#'
TOCKAZAREZ 95 ;
IDN 96 C
L_UGL_ZAGRADA 96 [
IDN 96 r
D_UGL_ZAGRADA 96 ]
L_UGL_ZAGRADA 96 [
IDN 96 a
D_UGL_ZAGRADA 96 ]
OP_PRIDRUZI 96 =
IDN 96 comp
MINUS 96 -
BROJ 96 1
TOCKAZAREZ 96 ;
D_VIT_ZAGRADA 97 }
D_VIT_ZAGRADA 98 }
D_VIT_ZAGRADA 99 }
KR_FOR 101 for
L_ZAGRADA 101 (
KR_INT 101 int
IDN 101 c
OP_PRIDRUZI 101 =
BROJ 101 0
TOCKAZAREZ 101 ;
IDN 101 c
OP_LT 101 <
IDN 101 N
TOCKAZAREZ 101 ;
OP_INC 101 ++
IDN 101 c
D_ZAGRADA 101 )
L_VIT_ZAGRADA 101 {
KR_INT 102 int
IDN 102 a
OP_PRIDRUZI 102 =
IDN 102 v
L_UGL_ZAGRADA 102 [
IDN 102 c
D_UGL_ZAGRADA 102 ]
TOCKA 102 .
IDN 102 first
TOCKAZAREZ 102 ;
KR_INT 103 int
IDN 103 b
OP_PRIDRUZI 103 =
IDN 103 v
L_UGL_ZAGRADA 103 [
IDN 103 c
D_UGL_ZAGRADA 103 ]
TOCKA 103 .
IDN 103 second
TOCKAZAREZ 103 ;
KR_IF 104 if
L_ZAGRADA 104 (
IDN 104 a
OP_EQ 104 ==
BROJ 104 123
D_ZAGRADA 104 )
L_VIT_ZAGRADA 104 {
KR_CONTINUE 105 continue
TOCKAZAREZ 105 ;
D_VIT_ZAGRADA 106 }
KR_WHILE 107 while
L_ZAGRADA 107 (
OP_INC 107 ++
IDN 107 a
OP_LT 107 <
IDN 107 b
D_ZAGRADA 107 )
L_VIT_ZAGRADA 107 {
KR_IF 108 if
L_ZAGRADA 108 (
IDN 108 A
L_UGL_ZAGRADA 108 [
IDN 108 a
D_UGL_ZAGRADA 108 ]
L_UGL_ZAGRADA 108 [
IDN 108 c
D_UGL_ZAGRADA 108 ]
OP_NEQ 108 !=
ZNAK 108 '#'
D_ZAGRADA 108 )
L_VIT_ZAGRADA 108 {
OP_INC 109 ++
IDN 109 d
TOCKAZAREZ 109 ;
IDN 110 A
L_UGL_ZAGRADA 110 [
IDN 110 a
D_UGL_ZAGRADA 110 ]
L_UGL_ZAGRADA 110 [
IDN 110 c
D_UGL_ZAGRADA 110 ]
OP_PRIDRUZI 110 =
ZNAK 110 '#'
TOCKAZAREZ 110 ;
IDN 111 C
L_UGL_ZAGRADA 111 [
IDN 111 a
D_UGL_ZAGRADA 111 ]
L_UGL_ZAGRADA 111 [
IDN 111 c
D_UGL_ZAGRADA 111 ]
OP_PRIDRUZI 111 =
IDN 111 comp
MINUS 111 -
BROJ 111 1
TOCKAZAREZ 111 ;
D_VIT_ZAGRADA 112 }
D_VIT_ZAGRADA 113 }
D_VIT_ZAGRADA 114 }
KR_IF 116 if
L_ZAGRADA 116 (
IDN 116 d
OP_GT 116 >
BROJ 116 0
D_ZAGRADA 116 )
L_VIT_ZAGRADA 116 {
IDN 117 change
OP_PRIDRUZI 117 =
IDN 117 true
TOCKAZAREZ 117 ;
IDN 118 B
TOCKA 118 .
IDN 118 sz
PLUS 118 +
OP_PRIDRUZI 118 =
IDN 118 d
TOCKAZAREZ 118 ;
IDN 119 S
TOCKA 119 .
IDN 119 insert
L_ZAGRADA 119 (
IDN 119 B
D_ZAGRADA 119 )
TOCKAZAREZ 119 ;
D_VIT_ZAGRADA 120 }
D_VIT_ZAGRADA 121 }
D_VIT_ZAGRADA 122 }
D_VIT_ZAGRADA 123 }
KR_IF 125 if
L_ZAGRADA 125 (
OP_NEG 125 !
IDN 125 change
D_ZAGRADA 125 )
L_VIT_ZAGRADA 125 {
KR_BREAK 126 break
TOCKAZAREZ 126 ;
D_VIT_ZAGRADA 127 }
D_VIT_ZAGRADA 128 }
KR_RETURN 130 return
IDN 130 A
TOCKAZAREZ 130 ;
D_VIT_ZAGRADA 131 }
IDN 141 public
KR_VOID 142 void
IDN 142 run_test
L_ZAGRADA 142 (
KR_INT 142 int
IDN 142 Case
D_ZAGRADA 142 )
L_VIT_ZAGRADA 142 {
KR_IF 142 if
L_ZAGRADA 142 (
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
MINUS 142 -
BROJ 142 1
D_ZAGRADA 142 )
OP_ILI 142 ||
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
BROJ 142 0
D_ZAGRADA 142 )
D_ZAGRADA 142 )
IDN 142 test_case_0
L_ZAGRADA 142 (
D_ZAGRADA 142 )
TOCKAZAREZ 142 ;
KR_IF 142 if
L_ZAGRADA 142 (
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
MINUS 142 -
BROJ 142 1
D_ZAGRADA 142 )
OP_ILI 142 ||
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
BROJ 142 1
D_ZAGRADA 142 )
D_ZAGRADA 142 )
IDN 142 test_case_1
L_ZAGRADA 142 (
D_ZAGRADA 142 )
TOCKAZAREZ 142 ;
KR_IF 142 if
L_ZAGRADA 142 (
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
MINUS 142 -
BROJ 142 1
D_ZAGRADA 142 )
OP_ILI 142 ||
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
BROJ 142 2
D_ZAGRADA 142 )
D_ZAGRADA 142 )
IDN 142 test_case_2
L_ZAGRADA 142 (
D_ZAGRADA 142 )
TOCKAZAREZ 142 ;
KR_IF 142 if
L_ZAGRADA 142 (
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
MINUS 142 -
BROJ 142 1
D_ZAGRADA 142 )
OP_ILI 142 ||
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
BROJ 142 3
D_ZAGRADA 142 )
D_ZAGRADA 142 )
IDN 142 test_case_3
L_ZAGRADA 142 (
D_ZAGRADA 142 )
TOCKAZAREZ 142 ;
KR_IF 142 if
L_ZAGRADA 142 (
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
MINUS 142 -
BROJ 142 1
D_ZAGRADA 142 )
OP_ILI 142 ||
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
BROJ 142 4
D_ZAGRADA 142 )
D_ZAGRADA 142 )
IDN 142 test_case_4
L_ZAGRADA 142 (
D_ZAGRADA 142 )
TOCKAZAREZ 142 ;
KR_IF 142 if
L_ZAGRADA 142 (
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
MINUS 142 -
BROJ 142 1
D_ZAGRADA 142 )
OP_ILI 142 ||
L_ZAGRADA 142 (
IDN 142 Case
OP_EQ 142 ==
BROJ 142 5
D_ZAGRADA 142 )
D_ZAGRADA 142 )
IDN 142 test_case_5
L_ZAGRADA 142 (
D_ZAGRADA 142 )
TOCKAZAREZ 142 ;
D_VIT_ZAGRADA 142 }
IDN 143 private
IDN 144 template
OP_LT 144 <
IDN 144 typename
IDN 144 T
OP_GT 144 >
IDN 144 string
IDN 144 print_array
L_ZAGRADA 144 (
KR_CONST 144 const
IDN 144 vector
OP_LT 144 <
IDN 144 T
OP_GT 144 >
AMPERSAND 144 &
IDN 144 V
D_ZAGRADA 144 )
L_VIT_ZAGRADA 144 {
IDN 144 ostringstream
IDN 144 os
TOCKAZAREZ 144 ;
IDN 144 os
OP_LT 144 <
OP_LT 144 <
NIZ_ZNAKOVA 144 "{ "
TOCKAZAREZ 144 ;
KR_FOR 144 for
L_ZAGRADA 144 (
IDN 144 typename
IDN 144 vector
OP_LT 144 <
IDN 144 T
OP_GT 144 >
IDN 144 const_iterator
IDN 144 iter
OP_PRIDRUZI 144 =
IDN 144 V
TOCKA 144 .
IDN 144 begin
L_ZAGRADA 144 (
D_ZAGRADA 144 )
TOCKAZAREZ 144 ;
IDN 144 iter
OP_NEQ 144 !=
IDN 144 V
TOCKA 144 .
IDN 144 end
L_ZAGRADA 144 (
D_ZAGRADA 144 )
TOCKAZAREZ 144 ;
OP_INC 144 ++
IDN 144 iter
D_ZAGRADA 144 )
IDN 144 os
OP_LT 144 <
OP_LT 144 <
ZNAK 144 '\"'
OP_LT 144 <
OP_LT 144 <
ASTERISK 144 *
IDN 144 iter
OP_LT 144 <
OP_LT 144 <
NIZ_ZNAKOVA 144 "\","
TOCKAZAREZ 144 ;
IDN 144 os
OP_LT 144 <
OP_LT 144 <
NIZ_ZNAKOVA 144 " }"
TOCKAZAREZ 144 ;
KR_RETURN 144 return
IDN 144 os
TOCKA 144 .
IDN 144 str
L_ZAGRADA 144 (
D_ZAGRADA 144 )
TOCKAZAREZ 144 ;
D_VIT_ZAGRADA 144 }
KR_VOID 145 void
IDN 145 verify_case
L_ZAGRADA 145 (
KR_INT 145 int
IDN 145 Case
ZAREZ 145 ,
KR_CONST 145 const
IDN 145 vector
OP_LT 145 <
IDN 145 string
OP_GT 145 >
AMPERSAND 145 &
IDN 145 Expected
ZAREZ 145 ,
KR_CONST 145 const
IDN 145 vector
OP_LT 145 <
IDN 145 string
OP_GT 145 >
AMPERSAND 145 &
IDN 145 Received
D_ZAGRADA 145 )
L_VIT_ZAGRADA 145 {
IDN 145 cerr
OP_LT 145 <
OP_LT 145 <
NIZ_ZNAKOVA 145 "Test Case #"
OP_LT 145 <
OP_LT 145 <
IDN 145 Case
OP_LT 145 <
OP_LT 145 <
NIZ_ZNAKOVA 145 "..."
TOCKAZAREZ 145 ;
KR_IF 145 if
L_ZAGRADA 145 (
IDN 145 Expected
OP_EQ 145 ==
IDN 145 Received
D_ZAGRADA 145 )
IDN 145 cerr
OP_LT 145 <
OP_LT 145 <
NIZ_ZNAKOVA 145 "PASSED"
OP_LT 145 <
OP_LT 145 <
IDN 145 endl
TOCKAZAREZ 145 ;
KR_ELSE 145 else
L_VIT_ZAGRADA 145 {
IDN 145 cerr
OP_LT 145 <
OP_LT 145 <
NIZ_ZNAKOVA 145 "FAILED"
OP_LT 145 <
OP_LT 145 <
IDN 145 endl
TOCKAZAREZ 145 ;
IDN 145 cerr
OP_LT 145 <
OP_LT 145 <
NIZ_ZNAKOVA 145 "\tExpected: "
OP_LT 145 <
OP_LT 145 <
IDN 145 print_array
L_ZAGRADA 145 (
IDN 145 Expected
D_ZAGRADA 145 )
OP_LT 145 <
OP_LT 145 <
IDN 145 endl
TOCKAZAREZ 145 ;
IDN 145 cerr
OP_LT 145 <
OP_LT 145 <
NIZ_ZNAKOVA 145 "\tReceived: "
OP_LT 145 <
OP_LT 145 <
IDN 145 print_array
L_ZAGRADA 145 (
IDN 145 Received
D_ZAGRADA 145 )
OP_LT 145 <
OP_LT 145 <
IDN 145 endl
TOCKAZAREZ 145 ;
D_VIT_ZAGRADA 145 }
D_VIT_ZAGRADA 145 }
KR_VOID 146 void
IDN 146 test_case_0
L_ZAGRADA 146 (
D_ZAGRADA 146 )
L_VIT_ZAGRADA 146 {
IDN 146 string
IDN 146 Arr0
L_UGL_ZAGRADA 146 [
D_UGL_ZAGRADA 146 ]
OP_PRIDRUZI 146 =
L_VIT_ZAGRADA 146 {
NIZ_ZNAKOVA 146 "...."
ZAREZ 146 ,
NIZ_ZNAKOVA 147 ".##."
ZAREZ 147 ,
NIZ_ZNAKOVA 148 ".##."
ZAREZ 148 ,
NIZ_ZNAKOVA 149 "...."
D_VIT_ZAGRADA 149 }
TOCKAZAREZ 149 ;
IDN 149 vector
OP_LT 149 <
IDN 149 string
OP_GT 149 >
IDN 149 Arg0
L_ZAGRADA 149 (
IDN 149 Arr0
ZAREZ 149 ,
IDN 149 Arr0
PLUS 149 +
L_ZAGRADA 149 (
IDN 149 sizeof
L_ZAGRADA 149 (
IDN 149 Arr0
D_ZAGRADA 149 )
OP_DIJELI 149 /
IDN 149 sizeof
L_ZAGRADA 149 (
IDN 149 Arr0
L_UGL_ZAGRADA 149 [
BROJ 149 0
D_UGL_ZAGRADA 149 ]
D_ZAGRADA 149 )
D_ZAGRADA 149 )
D_ZAGRADA 149 )
TOCKAZAREZ 149 ;
IDN 149 string
IDN 149 Arr1
L_UGL_ZAGRADA 149 [
D_UGL_ZAGRADA 149 ]
OP_PRIDRUZI 149 =
L_VIT_ZAGRADA 149 {
NIZ_ZNAKOVA 149 "...."
ZAREZ 149 ,
NIZ_ZNAKOVA 149 ".##."
ZAREZ 149 ,
NIZ_ZNAKOVA 149 ".##."
ZAREZ 149 ,
NIZ_ZNAKOVA 149 "...."
D_VIT_ZAGRADA 149 }
TOCKAZAREZ 149 ;
IDN 149 vector
OP_LT 149 <
IDN 149 string
OP_GT 149 >
IDN 149 Arg1
L_ZAGRADA 149 (
IDN 149 Arr1
ZAREZ 149 ,
IDN 149 Arr1
PLUS 149 +
L_ZAGRADA 149 (
IDN 149 sizeof
L_ZAGRADA 149 (
IDN 149 Arr1
D_ZAGRADA 149 )
OP_DIJELI 149 /
IDN 149 sizeof
L_ZAGRADA 149 (
IDN 149 Arr1
L_UGL_ZAGRADA 149 [
BROJ 149 0
D_UGL_ZAGRADA 149 ]
D_ZAGRADA 149 )
D_ZAGRADA 149 )
D_ZAGRADA 149 )
TOCKAZAREZ 149 ;
IDN 149 verify_case
L_ZAGRADA 149 (
BROJ 149 0
ZAREZ 149 ,
IDN 149 Arg1
ZAREZ 149 ,
IDN 149 originalImage
L_ZAGRADA 149 (
IDN 149 Arg0
D_ZAGRADA 149 )
D_ZAGRADA 149 )
TOCKAZAREZ 149 ;
D_VIT_ZAGRADA 149 }
KR_VOID 150 void
IDN 150 test_case_1
L_ZAGRADA 150 (
D_ZAGRADA 150 )
L_VIT_ZAGRADA 150 {
IDN 150 string
IDN 150 Arr0
L_UGL_ZAGRADA 150 [
D_UGL_ZAGRADA 150 ]
OP_PRIDRUZI 150 =
L_VIT_ZAGRADA 150 {
NIZ_ZNAKOVA 150 "....."
ZAREZ 150 ,
NIZ_ZNAKOVA 151 ".###."
ZAREZ 151 ,
NIZ_ZNAKOVA 152 ".#.#."
ZAREZ 152 ,
NIZ_ZNAKOVA 153 ".###."
ZAREZ 153 ,
NIZ_ZNAKOVA 154 "....."
D_VIT_ZAGRADA 154 }
TOCKAZAREZ 154 ;
IDN 154 vector
OP_LT 154 <
IDN 154 string
OP_GT 154 >
IDN 154 Arg0
L_ZAGRADA 154 (
IDN 154 Arr0
ZAREZ 154 ,
IDN 154 Arr0
PLUS 154 +
L_ZAGRADA 154 (
IDN 154 sizeof
L_ZAGRADA 154 (
IDN 154 Arr0
D_ZAGRADA 154 )
OP_DIJELI 154 /
IDN 154 sizeof
L_ZAGRADA 154 (
IDN 154 Arr0
L_UGL_ZAGRADA 154 [
BROJ 154 0
D_UGL_ZAGRADA 154 ]
D_ZAGRADA 154 )
D_ZAGRADA 154 )
D_ZAGRADA 154 )
TOCKAZAREZ 154 ;
IDN 154 string
IDN 154 Arr1
L_UGL_ZAGRADA 154 [
D_UGL_ZAGRADA 154 ]
OP_PRIDRUZI 154 =
L_VIT_ZAGRADA 154 {
NIZ_ZNAKOVA 154 "....."
ZAREZ 154 ,
NIZ_ZNAKOVA 154 ".###."
ZAREZ 154 ,
NIZ_ZNAKOVA 154 ".###."
ZAREZ 154 ,
NIZ_ZNAKOVA 154 ".###."
ZAREZ 154 ,
NIZ_ZNAKOVA 154 "....."
D_VIT_ZAGRADA 154 }
TOCKAZAREZ 154 ;
IDN 154 vector
OP_LT 154 <
IDN 154 string
OP_GT 154 >
IDN 154 Arg1
L_ZAGRADA 154 (
IDN 154 Arr1
ZAREZ 154 ,
IDN 154 Arr1
PLUS 154 +
L_ZAGRADA 154 (
IDN 154 sizeof
L_ZAGRADA 154 (
IDN 154 Arr1
D_ZAGRADA 154 )
OP_DIJELI 154 /
IDN 154 sizeof
L_ZAGRADA 154 (
IDN 154 Arr1
L_UGL_ZAGRADA 154 [
BROJ 154 0
D_UGL_ZAGRADA 154 ]
D_ZAGRADA 154 )
D_ZAGRADA 154 )
D_ZAGRADA 154 )
TOCKAZAREZ 154 ;
IDN 154 verify_case
L_ZAGRADA 154 (
BROJ 154 1
ZAREZ 154 ,
IDN 154 Arg1
ZAREZ 154 ,
IDN 154 originalImage
L_ZAGRADA 154 (
IDN 154 Arg0
D_ZAGRADA 154 )
D_ZAGRADA 154 )
TOCKAZAREZ 154 ;
D_VIT_ZAGRADA 154 }
KR_VOID 155 void
IDN 155 test_case_2
L_ZAGRADA 155 (
D_ZAGRADA 155 )
L_VIT_ZAGRADA 155 {
IDN 155 string
IDN 155 Arr0
L_UGL_ZAGRADA 155 [
D_UGL_ZAGRADA 155 ]
OP_PRIDRUZI 155 =
L_VIT_ZAGRADA 155 {
NIZ_ZNAKOVA 155 "......."
ZAREZ 155 ,
NIZ_ZNAKOVA 156 ".###..."
ZAREZ 156 ,
NIZ_ZNAKOVA 157 ".#..##."
ZAREZ 157 ,
NIZ_ZNAKOVA 158 ".###.#."
ZAREZ 158 ,
NIZ_ZNAKOVA 159 ".....#."
D_VIT_ZAGRADA 159 }
TOCKAZAREZ 159 ;
IDN 159 vector
OP_LT 159 <
IDN 159 string
OP_GT 159 >
IDN 159 Arg0
L_ZAGRADA 159 (
IDN 159 Arr0
ZAREZ 159 ,
IDN 159 Arr0
PLUS 159 +
L_ZAGRADA 159 (
IDN 159 sizeof
L_ZAGRADA 159 (
IDN 159 Arr0
D_ZAGRADA 159 )
OP_DIJELI 159 /
IDN 159 sizeof
L_ZAGRADA 159 (
IDN 159 Arr0
L_UGL_ZAGRADA 159 [
BROJ 159 0
D_UGL_ZAGRADA 159 ]
D_ZAGRADA 159 )
D_ZAGRADA 159 )
D_ZAGRADA 159 )
TOCKAZAREZ 159 ;
IDN 159 string
IDN 159 Arr1
L_UGL_ZAGRADA 159 [
D_UGL_ZAGRADA 159 ]
OP_PRIDRUZI 159 =
L_VIT_ZAGRADA 159 {
NIZ_ZNAKOVA 159 "......."
ZAREZ 159 ,
NIZ_ZNAKOVA 159 ".###..."
ZAREZ 159 ,
NIZ_ZNAKOVA 159 ".#####."
ZAREZ 159 ,
NIZ_ZNAKOVA 159 ".#####."
ZAREZ 159 ,
NIZ_ZNAKOVA 159 ".....#."
D_VIT_ZAGRADA 159 }
TOCKAZAREZ 159 ;
IDN 159 vector
OP_LT 159 <
IDN 159 string
OP_GT 159 >
IDN 159 Arg1
L_ZAGRADA 159 (
IDN 159 Arr1
ZAREZ 159 ,
IDN 159 Arr1
PLUS 159 +
L_ZAGRADA 159 (
IDN 159 sizeof
L_ZAGRADA 159 (
IDN 159 Arr1
D_ZAGRADA 159 )
OP_DIJELI 159 /
IDN 159 sizeof
L_ZAGRADA 159 (
IDN 159 Arr1
L_UGL_ZAGRADA 159 [
BROJ 159 0
D_UGL_ZAGRADA 159 ]
D_ZAGRADA 159 )
D_ZAGRADA 159 )
D_ZAGRADA 159 )
TOCKAZAREZ 159 ;
IDN 159 verify_case
L_ZAGRADA 159 (
BROJ 159 2
ZAREZ 159 ,
IDN 159 Arg1
ZAREZ 159 ,
IDN 159 originalImage
L_ZAGRADA 159 (
IDN 159 Arg0
D_ZAGRADA 159 )
D_ZAGRADA 159 )
TOCKAZAREZ 159 ;
D_VIT_ZAGRADA 159 }
KR_VOID 160 void
IDN 160 test_case_3
L_ZAGRADA 160 (
D_ZAGRADA 160 )
L_VIT_ZAGRADA 160 {
IDN 160 string
IDN 160 Arr0
L_UGL_ZAGRADA 160 [
D_UGL_ZAGRADA 160 ]
OP_PRIDRUZI 160 =
L_VIT_ZAGRADA 160 {
NIZ_ZNAKOVA 160 "................."
ZAREZ 160 ,
NIZ_ZNAKOVA 161 "#####.#..#..#####"
ZAREZ 161 ,
NIZ_ZNAKOVA 162 "..#...#..#....#.."
ZAREZ 162 ,
NIZ_ZNAKOVA 163 "..#...#..###..#.."
ZAREZ 163 ,
NIZ_ZNAKOVA 164 "................."
D_VIT_ZAGRADA 164 }
TOCKAZAREZ 164 ;
IDN 164 vector
OP_LT 164 <
IDN 164 string
OP_GT 164 >
IDN 164 Arg0
L_ZAGRADA 164 (
IDN 164 Arr0
ZAREZ 164 ,
IDN 164 Arr0
PLUS 164 +
L_ZAGRADA 164 (
IDN 164 sizeof
L_ZAGRADA 164 (
IDN 164 Arr0
D_ZAGRADA 164 )
OP_DIJELI 164 /
IDN 164 sizeof
L_ZAGRADA 164 (
IDN 164 Arr0
L_UGL_ZAGRADA 164 [
BROJ 164 0
D_UGL_ZAGRADA 164 ]
D_ZAGRADA 164 )
D_ZAGRADA 164 )
D_ZAGRADA 164 )
TOCKAZAREZ 164 ;
IDN 164 string
IDN 164 Arr1
L_UGL_ZAGRADA 164 [
D_UGL_ZAGRADA 164 ]
OP_PRIDRUZI 164 =
L_VIT_ZAGRADA 164 {
NIZ_ZNAKOVA 164 "................."
ZAREZ 164 ,
NIZ_ZNAKOVA 164 "#####.#..#..#####"
ZAREZ 164 ,
NIZ_ZNAKOVA 164 "..#...#..#....#.."
ZAREZ 164 ,
NIZ_ZNAKOVA 164 "..#...#..###..#.."
ZAREZ 164 ,
NIZ_ZNAKOVA 164 "................."
D_VIT_ZAGRADA 164 }
TOCKAZAREZ 164 ;
IDN 164 vector
OP_LT 164 <
IDN 164 string
OP_GT 164 >
IDN 164 Arg1
L_ZAGRADA 164 (
IDN 164 Arr1
ZAREZ 164 ,
IDN 164 Arr1
PLUS 164 +
L_ZAGRADA 164 (
IDN 164 sizeof
L_ZAGRADA 164 (
IDN 164 Arr1
D_ZAGRADA 164 )
OP_DIJELI 164 /
IDN 164 sizeof
L_ZAGRADA 164 (
IDN 164 Arr1
L_UGL_ZAGRADA 164 [
BROJ 164 0
D_UGL_ZAGRADA 164 ]
D_ZAGRADA 164 )
D_ZAGRADA 164 )
D_ZAGRADA 164 )
TOCKAZAREZ 164 ;
IDN 164 verify_case
L_ZAGRADA 164 (
BROJ 164 3
ZAREZ 164 ,
IDN 164 Arg1
ZAREZ 164 ,
IDN 164 originalImage
L_ZAGRADA 164 (
IDN 164 Arg0
D_ZAGRADA 164 )
D_ZAGRADA 164 )
TOCKAZAREZ 164 ;
D_VIT_ZAGRADA 164 }
KR_VOID 165 void
IDN 165 test_case_4
L_ZAGRADA 165 (
D_ZAGRADA 165 )
L_VIT_ZAGRADA 165 {
IDN 165 string
IDN 165 Arr0
L_UGL_ZAGRADA 165 [
D_UGL_ZAGRADA 165 ]
OP_PRIDRUZI 165 =
L_VIT_ZAGRADA 165 {
NIZ_ZNAKOVA 165 "###.####"
ZAREZ 165 ,
NIZ_ZNAKOVA 166 "#.#.#..#"
ZAREZ 166 ,
NIZ_ZNAKOVA 167 ".#...#.#"
ZAREZ 167 ,
NIZ_ZNAKOVA 168 ".#####.#"
ZAREZ 168 ,
NIZ_ZNAKOVA 169 "......#."
ZAREZ 169 ,
NIZ_ZNAKOVA 170 "########"
D_VIT_ZAGRADA 170 }
TOCKAZAREZ 170 ;
IDN 170 vector
OP_LT 170 <
IDN 170 string
OP_GT 170 >
IDN 170 Arg0
L_ZAGRADA 170 (
IDN 170 Arr0
ZAREZ 170 ,
IDN 170 Arr0
PLUS 170 +
L_ZAGRADA 170 (
IDN 170 sizeof
L_ZAGRADA 170 (
IDN 170 Arr0
D_ZAGRADA 170 )
OP_DIJELI 170 /
IDN 170 sizeof
L_ZAGRADA 170 (
IDN 170 Arr0
L_UGL_ZAGRADA 170 [
BROJ 170 0
D_UGL_ZAGRADA 170 ]
D_ZAGRADA 170 )
D_ZAGRADA 170 )
D_ZAGRADA 170 )
TOCKAZAREZ 170 ;
IDN 170 string
IDN 170 Arr1
L_UGL_ZAGRADA 170 [
D_UGL_ZAGRADA 170 ]
OP_PRIDRUZI 170 =
L_VIT_ZAGRADA 170 {
NIZ_ZNAKOVA 170 "########"
ZAREZ 170 ,
NIZ_ZNAKOVA 170 "########"
ZAREZ 170 ,
NIZ_ZNAKOVA 170 "########"
ZAREZ 170 ,
NIZ_ZNAKOVA 170 "########"
ZAREZ 170 ,
NIZ_ZNAKOVA 170 "########"
ZAREZ 170 ,
NIZ_ZNAKOVA 170 "########"
D_VIT_ZAGRADA 170 }
TOCKAZAREZ 170 ;
IDN 170 vector
OP_LT 170 <
IDN 170 string
OP_GT 170 >
IDN 170 Arg1
L_ZAGRADA 170 (
IDN 170 Arr1
ZAREZ 170 ,
IDN 170 Arr1
PLUS 170 +
L_ZAGRADA 170 (
IDN 170 sizeof
L_ZAGRADA 170 (
IDN 170 Arr1
D_ZAGRADA 170 )
OP_DIJELI 170 /
IDN 170 sizeof
L_ZAGRADA 170 (
IDN 170 Arr1
L_UGL_ZAGRADA 170 [
BROJ 170 0
D_UGL_ZAGRADA 170 ]
D_ZAGRADA 170 )
D_ZAGRADA 170 )
D_ZAGRADA 170 )
TOCKAZAREZ 170 ;
IDN 170 verify_case
L_ZAGRADA 170 (
BROJ 170 4
ZAREZ 170 ,
IDN 170 Arg1
ZAREZ 170 ,
IDN 170 originalImage
L_ZAGRADA 170 (
IDN 170 Arg0
D_ZAGRADA 170 )
D_ZAGRADA 170 )
TOCKAZAREZ 170 ;
D_VIT_ZAGRADA 170 }
KR_VOID 171 void
IDN 171 test_case_5
L_ZAGRADA 171 (
D_ZAGRADA 171 )
L_VIT_ZAGRADA 171 {
IDN 171 string
IDN 171 Arr0
L_UGL_ZAGRADA 171 [
D_UGL_ZAGRADA 171 ]
OP_PRIDRUZI 171 =
L_VIT_ZAGRADA 171 {
NIZ_ZNAKOVA 171 "..###.."
ZAREZ 171 ,
NIZ_ZNAKOVA 172 "..#.#.."
ZAREZ 172 ,
NIZ_ZNAKOVA 173 "##...##"
ZAREZ 173 ,
NIZ_ZNAKOVA 174 "#.....#"
ZAREZ 174 ,
NIZ_ZNAKOVA 175 "#.....#"
ZAREZ 175 ,
NIZ_ZNAKOVA 176 "#.....#"
ZAREZ 176 ,
NIZ_ZNAKOVA 177 "##...##"
ZAREZ 177 ,
NIZ_ZNAKOVA 178 "..#.#.."
ZAREZ 178 ,
NIZ_ZNAKOVA 179 "..###.."
D_VIT_ZAGRADA 179 }
TOCKAZAREZ 179 ;
IDN 179 vector
OP_LT 179 <
IDN 179 string
OP_GT 179 >
IDN 179 Arg0
L_ZAGRADA 179 (
IDN 179 Arr0
ZAREZ 179 ,
IDN 179 Arr0
PLUS 179 +
L_ZAGRADA 179 (
IDN 179 sizeof
L_ZAGRADA 179 (
IDN 179 Arr0
D_ZAGRADA 179 )
OP_DIJELI 179 /
IDN 179 sizeof
L_ZAGRADA 179 (
IDN 179 Arr0
L_UGL_ZAGRADA 179 [
BROJ 179 0
D_UGL_ZAGRADA 179 ]
D_ZAGRADA 179 )
D_ZAGRADA 179 )
D_ZAGRADA 179 )
TOCKAZAREZ 179 ;
IDN 179 string
IDN 179 Arr1
L_UGL_ZAGRADA 179 [
D_UGL_ZAGRADA 179 ]
OP_PRIDRUZI 179 =
L_VIT_ZAGRADA 179 {
NIZ_ZNAKOVA 179 "..###.."
ZAREZ 179 ,
NIZ_ZNAKOVA 179 "..###.."
ZAREZ 179 ,
NIZ_ZNAKOVA 179 "##...##"
ZAREZ 179 ,
NIZ_ZNAKOVA 179 "##...##"
ZAREZ 179 ,
NIZ_ZNAKOVA 179 "##...##"
ZAREZ 179 ,
NIZ_ZNAKOVA 179 "##...##"
ZAREZ 179 ,
NIZ_ZNAKOVA 179 "##...##"
ZAREZ 179 ,
NIZ_ZNAKOVA 179 "..###.."
ZAREZ 179 ,
NIZ_ZNAKOVA 179 "..###.."
D_VIT_ZAGRADA 179 }
TOCKAZAREZ 179 ;
IDN 179 vector
OP_LT 179 <
IDN 179 string
OP_GT 179 >
IDN 179 Arg1
L_ZAGRADA 179 (
IDN 179 Arr1
ZAREZ 179 ,
IDN 179 Arr1
PLUS 179 +
L_ZAGRADA 179 (
IDN 179 sizeof
L_ZAGRADA 179 (
IDN 179 Arr1
D_ZAGRADA 179 )
OP_DIJELI 179 /
IDN 179 sizeof
L_ZAGRADA 179 (
IDN 179 Arr1
L_UGL_ZAGRADA 179 [
BROJ 179 0
D_UGL_ZAGRADA 179 ]
D_ZAGRADA 179 )
D_ZAGRADA 179 )
D_ZAGRADA 179 )
TOCKAZAREZ 179 ;
IDN 179 verify_case
L_ZAGRADA 179 (
BROJ 179 5
ZAREZ 179 ,
IDN 179 Arg1
ZAREZ 179 ,
IDN 179 originalImage
L_ZAGRADA 179 (
IDN 179 Arg0
D_ZAGRADA 179 )
D_ZAGRADA 179 )
TOCKAZAREZ 179 ;
D_VIT_ZAGRADA 179 }
D_VIT_ZAGRADA 183 }
TOCKAZAREZ 183 ;
KR_INT 186 int
IDN 186 main
L_ZAGRADA 186 (
D_ZAGRADA 186 )
L_VIT_ZAGRADA 187 {
IDN 188 FixImage
IDN 188 ___test
TOCKAZAREZ 188 ;
IDN 189 ___test
TOCKA 189 .
IDN 189 run_test
L_ZAGRADA 189 (
MINUS 189 -
BROJ 189 1
D_ZAGRADA 189 )
TOCKAZAREZ 189 ;
D_VIT_ZAGRADA 190 }
